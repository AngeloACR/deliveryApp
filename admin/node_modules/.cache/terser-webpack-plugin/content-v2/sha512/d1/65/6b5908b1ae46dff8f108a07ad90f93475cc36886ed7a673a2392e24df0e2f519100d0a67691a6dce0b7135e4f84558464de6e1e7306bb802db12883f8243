{"map":"{\"version\":3,\"sources\":[\"/home/angeloacr/Proyectos/Tuk/ionic-taxi-4/admin/node_modules/@ionic/core/dist/esm/ion-nav_5.entry.js.pre-build-optimizer.js\"],\"names\":[\"__webpack_require__\",\"r\",\"__webpack_exports__\",\"d\",\"Nav\",\"NavLink\",\"NavPop\",\"NavPush\",\"NavSetRoot\",\"_core_c02a05e9_js__WEBPACK_IMPORTED_MODULE_0__\",\"_config_503c2549_js__WEBPACK_IMPORTED_MODULE_1__\",\"_constants_94c4865f_js__WEBPACK_IMPORTED_MODULE_2__\",\"_helpers_c90aaa66_js__WEBPACK_IMPORTED_MODULE_3__\",\"_framework_delegate_00265c49_js__WEBPACK_IMPORTED_MODULE_4__\",\"_index_a15151df_js__WEBPACK_IMPORTED_MODULE_5__\",\"_cubic_bezier_90d0df24_js__WEBPACK_IMPORTED_MODULE_6__\",\"VIEW_STATE_NEW\",\"VIEW_STATE_ATTACHED\",\"VIEW_STATE_DESTROYED\",\"ViewController\",\"[object Object]\",\"component\",\"params\",\"this\",\"state\",\"container\",\"element\",\"Object\",\"delegate\",\"removeViewFromDom\",\"parentElement\",\"remove\",\"nav\",\"undefined\",\"matches\",\"view\",\"id\",\"currentParams\",\"keysA\",\"keys\",\"keysB\",\"length\",\"key\",\"convertToView\",\"page\",\"hostRef\",\"transInstr\",\"animationEnabled\",\"useRouter\",\"isTransitioning\",\"destroyed\",\"views\",\"animated\",\"ionNavWillLoad\",\"ionNavWillChange\",\"ionNavDidChange\",\"gesture\",\"setDisabled\",\"swipeGesture\",\"root\",\"setRoot\",\"rootParams\",\"document\",\"querySelector\",\"el\",\"closest\",\"mode\",\"getBoolean\",\"emit\",\"rootChanged\",\"e\",\"then\",\"bind\",\"createSwipeBackGesture\",\"canStart\",\"onStart\",\"onMove\",\"onEnd\",\"swipeGestureChanged\",\"_destroy\",\"destroy\",\"componentProps\",\"opts\",\"done\",\"queueTrns\",\"insertStart\",\"insertViews\",\"insertIndex\",\"insertComponents\",\"removeStart\",\"removeCount\",\"indexOrViewCtrl\",\"tiConfig\",\"removeView\",\"startIndex\",\"setPages\",\"direction\",\"active\",\"getActiveSync\",\"Promise\",\"resolve\",\"changed\",\"promise\",\"finish\",\"commonOpts\",\"updateURL\",\"viewIsReady\",\"enteringEl\",\"mark\",\"p\",\"markVisible\",\"async\",\"viewController\",\"find\",\"v\",\"popTo\",\"assign\",\"push\",\"tagName\",\"index\",\"canGoBackSync\",\"getPreviousSync\",\"indexOf\",\"ti\",\"skipIfBusy\",\"reject\",\"nextTrns\",\"result\",\"fireError\",\"hasCompleted\",\"requiresTransition\",\"enteringView\",\"leavingView\",\"router\",\"navChanged\",\"rejectReason\",\"shift\",\"runTransition\",\"prepareTI\",\"getEnteringView\",\"Error\",\"init\",\"postViewInit\",\"enteringRequiresTransition\",\"leavingRequiresTransition\",\"transition\",\"success\",\"failed\",\"viewsLength\",\"viewControllers\",\"pages\",\"map\",\"filter\",\"convertToViews\",\"removeEnd\",\"i\",\"destroyQueue\",\"finalBalance\",\"console\",\"warn\",\"insertViewAt\",\"destroyView\",\"progressCallback\",\"progressAnimation\",\"ani\",\"sbAni\",\"leavingEl\",\"animationOpts\",\"showGoBack\",\"baseEl\",\"animationBuilder\",\"animation\",\"get\",\"transitionFinish\",\"cleanupView\",\"cleanup\",\"existingIndex\",\"splice\",\"activeView\",\"activeViewIndex\",\"stepValue\",\"progressStep\",\"shouldComplete\",\"dur\",\"onFinish\",\"oneTimeCallback\",\"newStepValue\",\"easing\",\"progressEnd\",\"watchers\",\"style\",\"navLink\",\"routerDirection\",\"pop\",\"onClick\"],\"mappings\":\"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\",\"sourcesContent\":[\"import { r as registerInstance, c as createEvent, d as getIonMode, h, e as getElement, H as Host } from './core-c02a05e9.js';\\nimport { b as config } from './config-503c2549.js';\\nimport { d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './constants-94c4865f.js';\\nimport { b as assert } from './helpers-c90aaa66.js';\\nimport { a as attachComponent } from './framework-delegate-00265c49.js';\\nimport { l as lifecycle, t as transition, s as setPageHidden } from './index-a15151df.js';\\nimport { g as getTimeGivenProgression, P as Point } from './cubic-bezier-90d0df24.js';\\n\\nconst VIEW_STATE_NEW = 1;\\r\\nconst VIEW_STATE_ATTACHED = 2;\\r\\nconst VIEW_STATE_DESTROYED = 3;\\r\\nclass ViewController {\\r\\n    constructor(component, params) {\\r\\n        this.component = component;\\r\\n        this.params = params;\\r\\n        this.state = VIEW_STATE_NEW;\\r\\n    }\\r\\n    async init(container) {\\r\\n        this.state = VIEW_STATE_ATTACHED;\\r\\n        if (!this.element) {\\r\\n            const component = this.component;\\r\\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * DOM WRITE\\r\\n     */\\r\\n    _destroy() {\\r\\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\\r\\n        const element = this.element;\\r\\n        if (element) {\\r\\n            if (this.delegate) {\\r\\n                this.delegate.removeViewFromDom(element.parentElement, element);\\r\\n            }\\r\\n            else {\\r\\n                element.remove();\\r\\n            }\\r\\n        }\\r\\n        this.nav = undefined;\\r\\n        this.state = VIEW_STATE_DESTROYED;\\r\\n    }\\r\\n}\\r\\nconst matches = (view, id, params) => {\\r\\n    if (!view) {\\r\\n        return false;\\r\\n    }\\r\\n    if (view.component !== id) {\\r\\n        return false;\\r\\n    }\\r\\n    const currentParams = view.params;\\r\\n    if (currentParams === params) {\\r\\n        return true;\\r\\n    }\\r\\n    if (!currentParams && !params) {\\r\\n        return true;\\r\\n    }\\r\\n    if (!currentParams || !params) {\\r\\n        return false;\\r\\n    }\\r\\n    const keysA = Object.keys(currentParams);\\r\\n    const keysB = Object.keys(params);\\r\\n    if (keysA.length !== keysB.length) {\\r\\n        return false;\\r\\n    }\\r\\n    // Test for A's keys different from B.\\r\\n    for (const key of keysA) {\\r\\n        if (currentParams[key] !== params[key]) {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    return true;\\r\\n};\\r\\nconst convertToView = (page, params) => {\\r\\n    if (!page) {\\r\\n        return null;\\r\\n    }\\r\\n    if (page instanceof ViewController) {\\r\\n        return page;\\r\\n    }\\r\\n    return new ViewController(page, params);\\r\\n};\\r\\nconst convertToViews = (pages) => {\\r\\n    return pages.map(page => {\\r\\n        if (page instanceof ViewController) {\\r\\n            return page;\\r\\n        }\\r\\n        if ('page' in page) {\\r\\n            return convertToView(page.page, page.params);\\r\\n        }\\r\\n        return convertToView(page, undefined);\\r\\n    }).filter(v => v !== null);\\r\\n};\\n\\nconst Nav = class {\\n    constructor(hostRef) {\\n        registerInstance(this, hostRef);\\n        this.transInstr = [];\\n        this.animationEnabled = true;\\n        this.useRouter = false;\\n        this.isTransitioning = false;\\n        this.destroyed = false;\\n        this.views = [];\\n        /**\\n         * If `true`, the nav should animate the transition of components.\\n         */\\n        this.animated = true;\\n        this.ionNavWillLoad = createEvent(this, \\\"ionNavWillLoad\\\", 7);\\n        this.ionNavWillChange = createEvent(this, \\\"ionNavWillChange\\\", 3);\\n        this.ionNavDidChange = createEvent(this, \\\"ionNavDidChange\\\", 3);\\n    }\\n    swipeGestureChanged() {\\n        if (this.gesture) {\\n            this.gesture.setDisabled(this.swipeGesture !== true);\\n        }\\n    }\\n    rootChanged() {\\n        if (this.root !== undefined) {\\n            if (!this.useRouter) {\\n                this.setRoot(this.root, this.rootParams);\\n            }\\n        }\\n    }\\n    componentWillLoad() {\\n        this.useRouter =\\n            !!document.querySelector('ion-router') &&\\n                !this.el.closest('[no-router]');\\n        if (this.swipeGesture === undefined) {\\n            const mode = getIonMode(this);\\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\\n        }\\n        this.ionNavWillLoad.emit();\\n    }\\n    async componentDidLoad() {\\n        this.rootChanged();\\n        this.gesture = (await import('./swipe-back-dc1b83c2.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\\n        this.swipeGestureChanged();\\n    }\\n    componentDidUnload() {\\n        for (const view of this.views) {\\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\\n            view._destroy();\\n        }\\n        if (this.gesture) {\\n            this.gesture.destroy();\\n            this.gesture = undefined;\\n        }\\n        // release swipe back gesture and transition\\n        this.transInstr.length = this.views.length = 0;\\n        this.destroyed = true;\\n    }\\n    /**\\n     * Push a new component onto the current navigation stack. Pass any additional\\n     * information along as an object. This additional information is accessible\\n     * through NavParams.\\n     *\\n     * @param component The component to push onto the navigation stack.\\n     * @param componentProps Any properties of the component.\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    push(component, componentProps, opts, done) {\\n        return this.queueTrns({\\n            insertStart: -1,\\n            insertViews: [{ page: component, params: componentProps }],\\n            opts\\n        }, done);\\n    }\\n    /**\\n     * Inserts a component into the navigation stack at the specified index.\\n     * This is useful to add a component at any point in the navigation stack.\\n     *\\n     * @param insertIndex The index to insert the component at in the stack.\\n     * @param component The component to insert into the navigation stack.\\n     * @param componentProps Any properties of the component.\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    insert(insertIndex, component, componentProps, opts, done) {\\n        return this.queueTrns({\\n            insertStart: insertIndex,\\n            insertViews: [{ page: component, params: componentProps }],\\n            opts\\n        }, done);\\n    }\\n    /**\\n     * Inserts an array of components into the navigation stack at the specified index.\\n     * The last component in the array will become instantiated as a view, and animate\\n     * in to become the active view.\\n     *\\n     * @param insertIndex The index to insert the components at in the stack.\\n     * @param insertComponents The components to insert into the navigation stack.\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    insertPages(insertIndex, insertComponents, opts, done) {\\n        return this.queueTrns({\\n            insertStart: insertIndex,\\n            insertViews: insertComponents,\\n            opts\\n        }, done);\\n    }\\n    /**\\n     * Pop a component off of the navigation stack. Navigates back from the current\\n     * component.\\n     *\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    pop(opts, done) {\\n        return this.queueTrns({\\n            removeStart: -1,\\n            removeCount: 1,\\n            opts\\n        }, done);\\n    }\\n    /**\\n     * Pop to a specific index in the navigation stack.\\n     *\\n     * @param indexOrViewCtrl The index or view controller to pop to.\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    popTo(indexOrViewCtrl, opts, done) {\\n        const tiConfig = {\\n            removeStart: -1,\\n            removeCount: -1,\\n            opts\\n        };\\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\\n            tiConfig.removeView = indexOrViewCtrl;\\n            tiConfig.removeStart = 1;\\n        }\\n        else if (typeof indexOrViewCtrl === 'number') {\\n            tiConfig.removeStart = indexOrViewCtrl + 1;\\n        }\\n        return this.queueTrns(tiConfig, done);\\n    }\\n    /**\\n     * Navigate back to the root of the stack, no matter how far back that is.\\n     *\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    popToRoot(opts, done) {\\n        return this.queueTrns({\\n            removeStart: 1,\\n            removeCount: -1,\\n            opts\\n        }, done);\\n    }\\n    /**\\n     * Removes a component from the navigation stack at the specified index.\\n     *\\n     * @param startIndex The number to begin removal at.\\n     * @param removeCount The number of components to remove.\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    removeIndex(startIndex, removeCount = 1, opts, done) {\\n        return this.queueTrns({\\n            removeStart: startIndex,\\n            removeCount,\\n            opts\\n        }, done);\\n    }\\n    /**\\n     * Set the root for the current navigation stack to a component.\\n     *\\n     * @param component The component to set as the root of the navigation stack.\\n     * @param componentProps Any properties of the component.\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    setRoot(component, componentProps, opts, done) {\\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\\n    }\\n    /**\\n     * Set the views of the current navigation stack and navigate to the last view.\\n     * By default animations are disabled, but they can be enabled by passing options\\n     * to the navigation controller. Navigation parameters can also be passed to the\\n     * individual pages in the array.\\n     *\\n     * @param views The list of views to set as the navigation stack.\\n     * @param opts The navigation options.\\n     * @param done The transition complete function.\\n     */\\n    setPages(views, opts, done) {\\n        if (opts == null) {\\n            opts = {};\\n        }\\n        // if animation wasn't set to true then default it to NOT animate\\n        if (opts.animated !== true) {\\n            opts.animated = false;\\n        }\\n        return this.queueTrns({\\n            insertStart: 0,\\n            insertViews: views,\\n            removeStart: 0,\\n            removeCount: -1,\\n            opts\\n        }, done);\\n    }\\n    /** @internal */\\n    setRouteId(id, params, direction) {\\n        const active = this.getActiveSync();\\n        if (matches(active, id, params)) {\\n            return Promise.resolve({\\n                changed: false,\\n                element: active.element\\n            });\\n        }\\n        let resolve;\\n        const promise = new Promise(r => (resolve = r));\\n        let finish;\\n        const commonOpts = {\\n            updateURL: false,\\n            viewIsReady: enteringEl => {\\n                let mark;\\n                const p = new Promise(r => (mark = r));\\n                resolve({\\n                    changed: true,\\n                    element: enteringEl,\\n                    markVisible: async () => {\\n                        mark();\\n                        await finish;\\n                    }\\n                });\\n                return p;\\n            }\\n        };\\n        if (direction === 'root') {\\n            finish = this.setRoot(id, params, commonOpts);\\n        }\\n        else {\\n            const viewController = this.views.find(v => matches(v, id, params));\\n            if (viewController) {\\n                finish = this.popTo(viewController, Object.assign({}, commonOpts, { direction: 'back' }));\\n            }\\n            else if (direction === 'forward') {\\n                finish = this.push(id, params, commonOpts);\\n            }\\n            else if (direction === 'back') {\\n                finish = this.setRoot(id, params, Object.assign({}, commonOpts, { direction: 'back', animated: true }));\\n            }\\n        }\\n        return promise;\\n    }\\n    /** @internal */\\n    async getRouteId() {\\n        const active = this.getActiveSync();\\n        return active\\n            ? {\\n                id: active.element.tagName,\\n                params: active.params,\\n                element: active.element\\n            }\\n            : undefined;\\n    }\\n    /**\\n     * Get the active view.\\n     */\\n    getActive() {\\n        return Promise.resolve(this.getActiveSync());\\n    }\\n    /**\\n     * Get the view at the specified index.\\n     *\\n     * @param index The index of the view.\\n     */\\n    getByIndex(index) {\\n        return Promise.resolve(this.views[index]);\\n    }\\n    /**\\n     * Returns `true` if the current view can go back.\\n     *\\n     * @param view The view to check.\\n     */\\n    canGoBack(view) {\\n        return Promise.resolve(this.canGoBackSync(view));\\n    }\\n    /**\\n     * Get the previous view.\\n     *\\n     * @param view The view to get.\\n     */\\n    getPrevious(view) {\\n        return Promise.resolve(this.getPreviousSync(view));\\n    }\\n    getLength() {\\n        return this.views.length;\\n    }\\n    getActiveSync() {\\n        return this.views[this.views.length - 1];\\n    }\\n    canGoBackSync(view = this.getActiveSync()) {\\n        return !!(view && this.getPreviousSync(view));\\n    }\\n    getPreviousSync(view = this.getActiveSync()) {\\n        if (!view) {\\n            return undefined;\\n        }\\n        const views = this.views;\\n        const index = views.indexOf(view);\\n        return index > 0 ? views[index - 1] : undefined;\\n    }\\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\\n    // 1. _nextTrns(): consumes the next transition in the queue\\n    // 2. _viewInit(): initializes enteringView if required\\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\\n    // 4. _postViewInit(): add/remove the views from the navigation stack\\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\\n    // 8. _transitionFinish(): called once the transition finishes\\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\\n    queueTrns(ti, done) {\\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\\n            return Promise.resolve(false);\\n        }\\n        const promise = new Promise((resolve, reject) => {\\n            ti.resolve = resolve;\\n            ti.reject = reject;\\n        });\\n        ti.done = done;\\n        // Normalize empty\\n        if (ti.insertViews && ti.insertViews.length === 0) {\\n            ti.insertViews = undefined;\\n        }\\n        // Enqueue transition instruction\\n        this.transInstr.push(ti);\\n        // if there isn't a transition already happening\\n        // then this will kick off this transition\\n        this.nextTrns();\\n        return promise;\\n    }\\n    success(result, ti) {\\n        if (this.destroyed) {\\n            this.fireError('nav controller was destroyed', ti);\\n            return;\\n        }\\n        if (ti.done) {\\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\\n        }\\n        ti.resolve(result.hasCompleted);\\n        if (ti.opts.updateURL !== false && this.useRouter) {\\n            const router = document.querySelector('ion-router');\\n            if (router) {\\n                const direction = result.direction === 'back' ? 'back' : 'forward';\\n                router.navChanged(direction);\\n            }\\n        }\\n    }\\n    failed(rejectReason, ti) {\\n        if (this.destroyed) {\\n            this.fireError('nav controller was destroyed', ti);\\n            return;\\n        }\\n        this.transInstr.length = 0;\\n        this.fireError(rejectReason, ti);\\n    }\\n    fireError(rejectReason, ti) {\\n        if (ti.done) {\\n            ti.done(false, false, rejectReason);\\n        }\\n        if (ti.reject && !this.destroyed) {\\n            ti.reject(rejectReason);\\n        }\\n        else {\\n            ti.resolve(false);\\n        }\\n    }\\n    nextTrns() {\\n        // this is the framework's bread 'n butta function\\n        // only one transition is allowed at any given time\\n        if (this.isTransitioning) {\\n            return false;\\n        }\\n        // there is no transition happening right now\\n        // get the next instruction\\n        const ti = this.transInstr.shift();\\n        if (!ti) {\\n            return false;\\n        }\\n        this.runTransition(ti);\\n        return true;\\n    }\\n    async runTransition(ti) {\\n        try {\\n            // set that this nav is actively transitioning\\n            this.ionNavWillChange.emit();\\n            this.isTransitioning = true;\\n            this.prepareTI(ti);\\n            const leavingView = this.getActiveSync();\\n            const enteringView = this.getEnteringView(ti, leavingView);\\n            if (!leavingView && !enteringView) {\\n                throw new Error('no views in the stack to be removed');\\n            }\\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\\n                await enteringView.init(this.el);\\n            }\\n            this.postViewInit(enteringView, leavingView, ti);\\n            // Needs transition?\\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\\n                enteringView !== leavingView;\\n            const result = requiresTransition\\n                ? await this.transition(enteringView, leavingView, ti)\\n                : {\\n                    // transition is not required, so we are already done!\\n                    // they're inserting/removing the views somewhere in the middle or\\n                    // beginning, so visually nothing needs to animate/transition\\n                    // resolve immediately because there's no animation that's happening\\n                    hasCompleted: true,\\n                    requiresTransition: false\\n                };\\n            this.success(result, ti);\\n            this.ionNavDidChange.emit();\\n        }\\n        catch (rejectReason) {\\n            this.failed(rejectReason, ti);\\n        }\\n        this.isTransitioning = false;\\n        this.nextTrns();\\n    }\\n    prepareTI(ti) {\\n        const viewsLength = this.views.length;\\n        ti.opts = ti.opts || {};\\n        if (ti.opts.delegate === undefined) {\\n            ti.opts.delegate = this.delegate;\\n        }\\n        if (ti.removeView !== undefined) {\\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\\n            const index = this.views.indexOf(ti.removeView);\\n            if (index < 0) {\\n                throw new Error('removeView was not found');\\n            }\\n            ti.removeStart += index;\\n        }\\n        if (ti.removeStart !== undefined) {\\n            if (ti.removeStart < 0) {\\n                ti.removeStart = viewsLength - 1;\\n            }\\n            if (ti.removeCount < 0) {\\n                ti.removeCount = viewsLength - ti.removeStart;\\n            }\\n            ti.leavingRequiresTransition =\\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\\n        }\\n        if (ti.insertViews) {\\n            // allow -1 to be passed in to auto push it on the end\\n            // and clean up the index if it's larger then the size of the stack\\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\\n                ti.insertStart = viewsLength;\\n            }\\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\\n        }\\n        const insertViews = ti.insertViews;\\n        if (!insertViews) {\\n            return;\\n        }\\n        assert(insertViews.length > 0, 'length can not be zero');\\n        const viewControllers = convertToViews(insertViews);\\n        if (viewControllers.length === 0) {\\n            throw new Error('invalid views to insert');\\n        }\\n        // Check all the inserted view are correct\\n        for (const view of viewControllers) {\\n            view.delegate = ti.opts.delegate;\\n            const nav = view.nav;\\n            if (nav && nav !== this) {\\n                throw new Error('inserted view was already inserted');\\n            }\\n            if (view.state === VIEW_STATE_DESTROYED) {\\n                throw new Error('inserted view was already destroyed');\\n            }\\n        }\\n        ti.insertViews = viewControllers;\\n    }\\n    getEnteringView(ti, leavingView) {\\n        const insertViews = ti.insertViews;\\n        if (insertViews !== undefined) {\\n            // grab the very last view of the views to be inserted\\n            // and initialize it as the new entering view\\n            return insertViews[insertViews.length - 1];\\n        }\\n        const removeStart = ti.removeStart;\\n        if (removeStart !== undefined) {\\n            const views = this.views;\\n            const removeEnd = removeStart + ti.removeCount;\\n            for (let i = views.length - 1; i >= 0; i--) {\\n                const view = views[i];\\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\\n                    return view;\\n                }\\n            }\\n        }\\n        return undefined;\\n    }\\n    postViewInit(enteringView, leavingView, ti) {\\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\\n        assert(ti.resolve, 'resolve must be valid');\\n        assert(ti.reject, 'reject must be valid');\\n        const opts = ti.opts;\\n        const insertViews = ti.insertViews;\\n        const removeStart = ti.removeStart;\\n        const removeCount = ti.removeCount;\\n        let destroyQueue;\\n        // there are views to remove\\n        if (removeStart !== undefined && removeCount !== undefined) {\\n            assert(removeStart >= 0, 'removeStart can not be negative');\\n            assert(removeCount >= 0, 'removeCount can not be negative');\\n            destroyQueue = [];\\n            for (let i = 0; i < removeCount; i++) {\\n                const view = this.views[i + removeStart];\\n                if (view && view !== enteringView && view !== leavingView) {\\n                    destroyQueue.push(view);\\n                }\\n            }\\n            // default the direction to \\\"back\\\"\\n            opts.direction = opts.direction || 'back';\\n        }\\n        const finalBalance = this.views.length +\\n            (insertViews !== undefined ? insertViews.length : 0) -\\n            (removeCount !== undefined ? removeCount : 0);\\n        assert(finalBalance >= 0, 'final balance can not be negative');\\n        if (finalBalance === 0) {\\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\\n            throw new Error('navigation stack needs at least one root page');\\n        }\\n        // At this point the transition can not be rejected, any throw should be an error\\n        // there are views to insert\\n        if (insertViews) {\\n            // add the views to the\\n            let insertIndex = ti.insertStart;\\n            for (const view of insertViews) {\\n                this.insertViewAt(view, insertIndex);\\n                insertIndex++;\\n            }\\n            if (ti.enteringRequiresTransition) {\\n                // default to forward if not already set\\n                opts.direction = opts.direction || 'forward';\\n            }\\n        }\\n        // if the views to be removed are in the beginning or middle\\n        // and there is not a view that needs to visually transition out\\n        // then just destroy them and don't transition anything\\n        // batch all of lifecycles together\\n        // let's make sure, callbacks are zoned\\n        if (destroyQueue && destroyQueue.length > 0) {\\n            for (const view of destroyQueue) {\\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\\n            }\\n            // once all lifecycle events has been delivered, we can safely detroy the views\\n            for (const view of destroyQueue) {\\n                this.destroyView(view);\\n            }\\n        }\\n    }\\n    async transition(enteringView, leavingView, ti) {\\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\\n        // or if it is a portal (modal, actionsheet, etc.)\\n        const opts = ti.opts;\\n        const progressCallback = opts.progressAnimation\\n            ? (ani) => this.sbAni = ani\\n            : undefined;\\n        const mode = getIonMode(this);\\n        const enteringEl = enteringView.element;\\n        const leavingEl = leavingView && leavingView.element;\\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\\n            leavingEl }, opts);\\n        const { hasCompleted } = await transition(animationOpts);\\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\\n    }\\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\\n        const cleanupView = hasCompleted ? enteringView : leavingView;\\n        if (cleanupView) {\\n            this.cleanup(cleanupView);\\n        }\\n        return {\\n            hasCompleted,\\n            requiresTransition: true,\\n            enteringView,\\n            leavingView,\\n            direction: opts.direction\\n        };\\n    }\\n    insertViewAt(view, index) {\\n        const views = this.views;\\n        const existingIndex = views.indexOf(view);\\n        if (existingIndex > -1) {\\n            // this view is already in the stack!!\\n            // move it to its new location\\n            assert(view.nav === this, 'view is not part of the nav');\\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\\n        }\\n        else {\\n            assert(!view.nav, 'nav is used');\\n            // this is a new view to add to the stack\\n            // create the new entering view\\n            view.nav = this;\\n            // insert the entering view into the correct index in the stack\\n            views.splice(index, 0, view);\\n        }\\n    }\\n    removeView(view) {\\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\\n        const views = this.views;\\n        const index = views.indexOf(view);\\n        assert(index > -1, 'view must be part of the stack');\\n        if (index >= 0) {\\n            views.splice(index, 1);\\n        }\\n    }\\n    destroyView(view) {\\n        view._destroy();\\n        this.removeView(view);\\n    }\\n    /**\\n     * DOM WRITE\\n     */\\n    cleanup(activeView) {\\n        // ok, cleanup time!! Destroy all of the views that are\\n        // INACTIVE and come after the active view\\n        // only do this if the views exist, though\\n        if (this.destroyed) {\\n            return;\\n        }\\n        const views = this.views;\\n        const activeViewIndex = views.indexOf(activeView);\\n        for (let i = views.length - 1; i >= 0; i--) {\\n            const view = views[i];\\n            const element = view.element;\\n            if (i > activeViewIndex) {\\n                // this view comes after the active view\\n                // let's unload it\\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\\n                this.destroyView(view);\\n            }\\n            else if (i < activeViewIndex) {\\n                // this view comes before the active view\\n                // and it is not a portal then ensure it is hidden\\n                setPageHidden(element, true);\\n            }\\n        }\\n    }\\n    canStart() {\\n        return (!!this.swipeGesture &&\\n            !this.isTransitioning &&\\n            this.transInstr.length === 0 &&\\n            this.animationEnabled &&\\n            this.canGoBackSync());\\n    }\\n    onStart() {\\n        this.queueTrns({\\n            removeStart: -1,\\n            removeCount: 1,\\n            opts: {\\n                direction: 'back',\\n                progressAnimation: true\\n            }\\n        }, undefined);\\n    }\\n    onMove(stepValue) {\\n        if (this.sbAni) {\\n            this.sbAni.progressStep(stepValue);\\n        }\\n    }\\n    onEnd(shouldComplete, stepValue, dur) {\\n        if (this.sbAni) {\\n            this.animationEnabled = false;\\n            this.sbAni.onFinish(() => {\\n                this.animationEnabled = true;\\n            }, { oneTimeCallback: true });\\n            // Account for rounding errors in JS\\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\\n            /**\\n             * Animation will be reversed here, so need to\\n             * reverse the easing curve as well\\n             *\\n             * Additionally, we need to account for the time relative\\n             * to the new easing curve, as `stepValue` is going to be given\\n             * in terms of a linear curve.\\n             */\\n            if (!shouldComplete) {\\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(1, 0), new Point(0.68, 0.28), new Point(1, 1), stepValue);\\n            }\\n            else {\\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(0.32, 0.72), new Point(0, 1), new Point(1, 1), stepValue);\\n            }\\n            this.sbAni.progressEnd(shouldComplete, newStepValue, dur);\\n        }\\n    }\\n    render() {\\n        return (h(\\\"slot\\\", null));\\n    }\\n    get el() { return getElement(this); }\\n    static get watchers() { return {\\n        \\\"swipeGesture\\\": [\\\"swipeGestureChanged\\\"],\\n        \\\"root\\\": [\\\"rootChanged\\\"]\\n    }; }\\n    static get style() { return \\\":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\\\"; }\\n};\\n\\nconst navLink = (el, routerDirection, component, componentProps) => {\\r\\n    const nav = el.closest('ion-nav');\\r\\n    if (nav) {\\r\\n        if (routerDirection === 'forward') {\\r\\n            if (component !== undefined) {\\r\\n                return nav.push(component, componentProps, { skipIfBusy: true });\\r\\n            }\\r\\n        }\\r\\n        else if (routerDirection === 'root') {\\r\\n            if (component !== undefined) {\\r\\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\\r\\n            }\\r\\n        }\\r\\n        else if (routerDirection === 'back') {\\r\\n            return nav.pop({ skipIfBusy: true });\\r\\n        }\\r\\n    }\\r\\n    return Promise.resolve(false);\\r\\n};\\n\\nconst NavLink = class {\\n    constructor(hostRef) {\\n        registerInstance(this, hostRef);\\n        /**\\n         * The transition direction when navigating to another page.\\n         */\\n        this.routerDirection = 'forward';\\n        this.onClick = () => {\\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\\n        };\\n    }\\n    render() {\\n        return (h(Host, { onClick: this.onClick }));\\n    }\\n    get el() { return getElement(this); }\\n};\\n\\nconst NavPop = class {\\n    constructor(hostRef) {\\n        registerInstance(this, hostRef);\\n        this.pop = () => {\\n            return navLink(this.el, 'back');\\n        };\\n    }\\n    componentDidLoad() {\\n        console.warn('[DEPRECATED][ion-nav-pop] <ion-nav-pop> is deprecated. Use `<ion-nav-link routerDirection=\\\"back\\\">` instead.');\\n    }\\n    render() {\\n        return (h(Host, { onClick: this.pop }));\\n    }\\n    get el() { return getElement(this); }\\n};\\n\\nconst NavPush = class {\\n    constructor(hostRef) {\\n        registerInstance(this, hostRef);\\n        this.push = () => {\\n            return navLink(this.el, 'forward', this.component, this.componentProps);\\n        };\\n    }\\n    componentDidLoad() {\\n        console.warn('[DEPRECATED][ion-nav-push] `<ion-nav-push component=\\\"MyComponent\\\">` is deprecated. Use `<ion-nav-link component=\\\"MyComponent\\\">` instead.');\\n    }\\n    render() {\\n        return (h(Host, { onClick: this.push }));\\n    }\\n    get el() { return getElement(this); }\\n};\\n\\nconst NavSetRoot = class {\\n    constructor(hostRef) {\\n        registerInstance(this, hostRef);\\n        this.setRoot = () => {\\n            return navLink(this.el, 'root', this.component, this.componentProps);\\n        };\\n    }\\n    componentDidLoad() {\\n        console.warn('[DEPRECATED][ion-nav-set-root] `<ion-nav-set-root component=\\\"MyComponent\\\">` is deprecated. Use `<ion-nav-link component=\\\"MyComponent\\\" routerDirection=\\\"root\\\">` instead.');\\n    }\\n    render() {\\n        return (h(Host, { onClick: this.setRoot }));\\n    }\\n    get el() { return getElement(this); }\\n};\\n\\nexport { Nav as ion_nav, NavLink as ion_nav_link, NavPop as ion_nav_pop, NavPush as ion_nav_push, NavSetRoot as ion_nav_set_root };\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{\"qF1+\":function(e,t,i){\"use strict\";i.r(t),i.d(t,\"ion_nav\",(function(){return b})),i.d(t,\"ion_nav_link\",(function(){return w})),i.d(t,\"ion_nav_pop\",(function(){return f})),i.d(t,\"ion_nav_push\",(function(){return y})),i.d(t,\"ion_nav_set_root\",(function(){return j}));var n=i(\"MTfx\"),s=i(\"pcH8\"),o=i(\"igpV\"),r=i(\"9Xoc\"),a=i(\"tkfp\"),c=i(\"UlPI\"),h=i(\"3QqI\");const l=1,u=2,d=3;class v{constructor(e,t){this.component=e,this.params=t,this.state=l}async init(e){if(this.state=u,!this.element){const t=this.component;this.element=await Object(a.a)(this.delegate,e,t,[\"ion-page\",\"ion-page-invisible\"],this.params)}}_destroy(){Object(r.b)(this.state!==d,\"view state must be ATTACHED\");const e=this.element;e&&(this.delegate?this.delegate.removeViewFromDom(e.parentElement,e):e.remove()),this.nav=void 0,this.state=d}}const p=(e,t,i)=>{if(!e)return!1;if(e.component!==t)return!1;const n=e.params;if(n===i)return!0;if(!n&&!i)return!0;if(!n||!i)return!1;const s=Object.keys(n),o=Object.keys(i);if(s.length!==o.length)return!1;for(const r of s)if(n[r]!==i[r])return!1;return!0},m=(e,t)=>e?e instanceof v?e:new v(e,t):null,b=class{constructor(e){Object(n.l)(this,e),this.transInstr=[],this.animationEnabled=!0,this.useRouter=!1,this.isTransitioning=!1,this.destroyed=!1,this.views=[],this.animated=!0,this.ionNavWillLoad=Object(n.d)(this,\"ionNavWillLoad\",7),this.ionNavWillChange=Object(n.d)(this,\"ionNavWillChange\",3),this.ionNavDidChange=Object(n.d)(this,\"ionNavDidChange\",3)}swipeGestureChanged(){this.gesture&&this.gesture.setDisabled(!0!==this.swipeGesture)}rootChanged(){void 0!==this.root&&(this.useRouter||this.setRoot(this.root,this.rootParams))}componentWillLoad(){if(this.useRouter=!!document.querySelector(\"ion-router\")&&!this.el.closest(\"[no-router]\"),void 0===this.swipeGesture){const e=Object(n.e)(this);this.swipeGesture=s.b.getBoolean(\"swipeBackEnabled\",\"ios\"===e)}this.ionNavWillLoad.emit()}async componentDidLoad(){this.rootChanged(),this.gesture=(await i.e(3).then(i.bind(null,\"9fVT\"))).createSwipeBackGesture(this.el,this.canStart.bind(this),this.onStart.bind(this),this.onMove.bind(this),this.onEnd.bind(this)),this.swipeGestureChanged()}componentDidUnload(){for(const e of this.views)Object(c.b)(e.element,o.e),e._destroy();this.gesture&&(this.gesture.destroy(),this.gesture=void 0),this.transInstr.length=this.views.length=0,this.destroyed=!0}push(e,t,i,n){return this.queueTrns({insertStart:-1,insertViews:[{page:e,params:t}],opts:i},n)}insert(e,t,i,n,s){return this.queueTrns({insertStart:e,insertViews:[{page:t,params:i}],opts:n},s)}insertPages(e,t,i,n){return this.queueTrns({insertStart:e,insertViews:t,opts:i},n)}pop(e,t){return this.queueTrns({removeStart:-1,removeCount:1,opts:e},t)}popTo(e,t,i){const n={removeStart:-1,removeCount:-1,opts:t};return\"object\"==typeof e&&e.component?(n.removeView=e,n.removeStart=1):\"number\"==typeof e&&(n.removeStart=e+1),this.queueTrns(n,i)}popToRoot(e,t){return this.queueTrns({removeStart:1,removeCount:-1,opts:e},t)}removeIndex(e,t=1,i,n){return this.queueTrns({removeStart:e,removeCount:t,opts:i},n)}setRoot(e,t,i,n){return this.setPages([{page:e,params:t}],i,n)}setPages(e,t,i){return null==t&&(t={}),!0!==t.animated&&(t.animated=!1),this.queueTrns({insertStart:0,insertViews:e,removeStart:0,removeCount:-1,opts:t},i)}setRouteId(e,t,i){const n=this.getActiveSync();if(p(n,e,t))return Promise.resolve({changed:!1,element:n.element});let s;const o=new Promise(e=>s=e);let r;const a={updateURL:!1,viewIsReady:e=>{let t;const i=new Promise(e=>t=e);return s({changed:!0,element:e,markVisible:async()=>{t(),await r}}),i}};if(\"root\"===i)r=this.setRoot(e,t,a);else{const n=this.views.find(i=>p(i,e,t));n?r=this.popTo(n,Object.assign({},a,{direction:\"back\"})):\"forward\"===i?r=this.push(e,t,a):\"back\"===i&&(r=this.setRoot(e,t,Object.assign({},a,{direction:\"back\",animated:!0})))}return o}async getRouteId(){const e=this.getActiveSync();return e?{id:e.element.tagName,params:e.params,element:e.element}:void 0}getActive(){return Promise.resolve(this.getActiveSync())}getByIndex(e){return Promise.resolve(this.views[e])}canGoBack(e){return Promise.resolve(this.canGoBackSync(e))}getPrevious(e){return Promise.resolve(this.getPreviousSync(e))}getLength(){return this.views.length}getActiveSync(){return this.views[this.views.length-1]}canGoBackSync(e=this.getActiveSync()){return!(!e||!this.getPreviousSync(e))}getPreviousSync(e=this.getActiveSync()){if(!e)return;const t=this.views,i=t.indexOf(e);return i>0?t[i-1]:void 0}queueTrns(e,t){if(this.isTransitioning&&null!=e.opts&&e.opts.skipIfBusy)return Promise.resolve(!1);const i=new Promise((t,i)=>{e.resolve=t,e.reject=i});return e.done=t,e.insertViews&&0===e.insertViews.length&&(e.insertViews=void 0),this.transInstr.push(e),this.nextTrns(),i}success(e,t){if(this.destroyed)this.fireError(\"nav controller was destroyed\",t);else if(t.done&&t.done(e.hasCompleted,e.requiresTransition,e.enteringView,e.leavingView,e.direction),t.resolve(e.hasCompleted),!1!==t.opts.updateURL&&this.useRouter){const t=document.querySelector(\"ion-router\");t&&t.navChanged(\"back\"===e.direction?\"back\":\"forward\")}}failed(e,t){this.destroyed?this.fireError(\"nav controller was destroyed\",t):(this.transInstr.length=0,this.fireError(e,t))}fireError(e,t){t.done&&t.done(!1,!1,e),t.reject&&!this.destroyed?t.reject(e):t.resolve(!1)}nextTrns(){if(this.isTransitioning)return!1;const e=this.transInstr.shift();return!!e&&(this.runTransition(e),!0)}async runTransition(e){try{this.ionNavWillChange.emit(),this.isTransitioning=!0,this.prepareTI(e);const t=this.getActiveSync(),i=this.getEnteringView(e,t);if(!t&&!i)throw new Error(\"no views in the stack to be removed\");i&&i.state===l&&await i.init(this.el),this.postViewInit(i,t,e);const n=(e.enteringRequiresTransition||e.leavingRequiresTransition)&&i!==t?await this.transition(i,t,e):{hasCompleted:!0,requiresTransition:!1};this.success(n,e),this.ionNavDidChange.emit()}catch(t){this.failed(t,e)}this.isTransitioning=!1,this.nextTrns()}prepareTI(e){const t=this.views.length;if(e.opts=e.opts||{},void 0===e.opts.delegate&&(e.opts.delegate=this.delegate),void 0!==e.removeView){Object(r.b)(void 0!==e.removeStart,\"removeView needs removeStart\"),Object(r.b)(void 0!==e.removeCount,\"removeView needs removeCount\");const t=this.views.indexOf(e.removeView);if(t<0)throw new Error(\"removeView was not found\");e.removeStart+=t}void 0!==e.removeStart&&(e.removeStart<0&&(e.removeStart=t-1),e.removeCount<0&&(e.removeCount=t-e.removeStart),e.leavingRequiresTransition=e.removeCount>0&&e.removeStart+e.removeCount===t),e.insertViews&&((e.insertStart<0||e.insertStart>t)&&(e.insertStart=t),e.enteringRequiresTransition=e.insertStart===t);const i=e.insertViews;if(!i)return;Object(r.b)(i.length>0,\"length can not be zero\");const n=(e=>e.map(e=>e instanceof v?e:\"page\"in e?m(e.page,e.params):m(e,void 0)).filter(e=>null!==e))(i);if(0===n.length)throw new Error(\"invalid views to insert\");for(const s of n){s.delegate=e.opts.delegate;const t=s.nav;if(t&&t!==this)throw new Error(\"inserted view was already inserted\");if(s.state===d)throw new Error(\"inserted view was already destroyed\")}e.insertViews=n}getEnteringView(e,t){const i=e.insertViews;if(void 0!==i)return i[i.length-1];const n=e.removeStart;if(void 0!==n){const i=this.views,s=n+e.removeCount;for(let e=i.length-1;e>=0;e--){const o=i[e];if((e<n||e>=s)&&o!==t)return o}}}postViewInit(e,t,i){Object(r.b)(t||e,\"Both leavingView and enteringView are null\"),Object(r.b)(i.resolve,\"resolve must be valid\"),Object(r.b)(i.reject,\"reject must be valid\");const n=i.opts,s=i.insertViews,a=i.removeStart,h=i.removeCount;let l;if(void 0!==a&&void 0!==h){Object(r.b)(a>=0,\"removeStart can not be negative\"),Object(r.b)(h>=0,\"removeCount can not be negative\"),l=[];for(let i=0;i<h;i++){const n=this.views[i+a];n&&n!==e&&n!==t&&l.push(n)}n.direction=n.direction||\"back\"}const u=this.views.length+(void 0!==s?s.length:0)-(void 0!==h?h:0);if(Object(r.b)(u>=0,\"final balance can not be negative\"),0===u)throw console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\",this,this.el),new Error(\"navigation stack needs at least one root page\");if(s){let e=i.insertStart;for(const t of s)this.insertViewAt(t,e),e++;i.enteringRequiresTransition&&(n.direction=n.direction||\"forward\")}if(l&&l.length>0){for(const e of l)Object(c.b)(e.element,o.c),Object(c.b)(e.element,o.d),Object(c.b)(e.element,o.e);for(const e of l)this.destroyView(e)}}async transition(e,t,i){const o=i.opts,r=o.progressAnimation?e=>this.sbAni=e:void 0,a=Object(n.e)(this),h=e.element,l=t&&t.element,u=Object.assign({mode:a,showGoBack:this.canGoBackSync(e),baseEl:this.el,animationBuilder:this.animation||o.animationBuilder||s.b.get(\"navAnimation\"),progressCallback:r,animated:this.animated&&s.b.getBoolean(\"animated\",!0),enteringEl:h,leavingEl:l},o),{hasCompleted:d}=await Object(c.d)(u);return this.transitionFinish(d,e,t,o)}transitionFinish(e,t,i,n){const s=e?t:i;return s&&this.cleanup(s),{hasCompleted:e,requiresTransition:!0,enteringView:t,leavingView:i,direction:n.direction}}insertViewAt(e,t){const i=this.views,n=i.indexOf(e);n>-1?(Object(r.b)(e.nav===this,\"view is not part of the nav\"),i.splice(t,0,i.splice(n,1)[0])):(Object(r.b)(!e.nav,\"nav is used\"),e.nav=this,i.splice(t,0,e))}removeView(e){Object(r.b)(e.state===u||e.state===d,\"view state should be loaded or destroyed\");const t=this.views,i=t.indexOf(e);Object(r.b)(i>-1,\"view must be part of the stack\"),i>=0&&t.splice(i,1)}destroyView(e){e._destroy(),this.removeView(e)}cleanup(e){if(this.destroyed)return;const t=this.views,i=t.indexOf(e);for(let n=t.length-1;n>=0;n--){const e=t[n],s=e.element;n>i?(Object(c.b)(s,o.e),this.destroyView(e)):n<i&&Object(c.c)(s,!0)}}canStart(){return!!this.swipeGesture&&!this.isTransitioning&&0===this.transInstr.length&&this.animationEnabled&&this.canGoBackSync()}onStart(){this.queueTrns({removeStart:-1,removeCount:1,opts:{direction:\"back\",progressAnimation:!0}},void 0)}onMove(e){this.sbAni&&this.sbAni.progressStep(e)}onEnd(e,t,i){if(this.sbAni){this.animationEnabled=!1,this.sbAni.onFinish(()=>{this.animationEnabled=!0},{oneTimeCallback:!0});let n=e?-.001:.001;e?n+=Object(h.b)(new h.a(0,0),new h.a(.32,.72),new h.a(0,1),new h.a(1,1),t):(this.sbAni.easing(\"cubic-bezier(1, 0, 0.68, 0.28)\"),n+=Object(h.b)(new h.a(0,0),new h.a(1,0),new h.a(.68,.28),new h.a(1,1),t)),this.sbAni.progressEnd(e,n,i)}}render(){return Object(n.i)(\"slot\",null)}get el(){return Object(n.f)(this)}static get watchers(){return{swipeGesture:[\"swipeGestureChanged\"],root:[\"rootChanged\"]}}static get style(){return\":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\"}},g=(e,t,i,n)=>{const s=e.closest(\"ion-nav\");if(s)if(\"forward\"===t){if(void 0!==i)return s.push(i,n,{skipIfBusy:!0})}else if(\"root\"===t){if(void 0!==i)return s.setRoot(i,n,{skipIfBusy:!0})}else if(\"back\"===t)return s.pop({skipIfBusy:!0});return Promise.resolve(!1)},w=class{constructor(e){Object(n.l)(this,e),this.routerDirection=\"forward\",this.onClick=()=>g(this.el,this.routerDirection,this.component,this.componentProps)}render(){return Object(n.i)(n.a,{onClick:this.onClick})}get el(){return Object(n.f)(this)}},f=class{constructor(e){Object(n.l)(this,e),this.pop=()=>g(this.el,\"back\")}componentDidLoad(){console.warn('[DEPRECATED][ion-nav-pop] <ion-nav-pop> is deprecated. Use `<ion-nav-link routerDirection=\"back\">` instead.')}render(){return Object(n.i)(n.a,{onClick:this.pop})}get el(){return Object(n.f)(this)}},y=class{constructor(e){Object(n.l)(this,e),this.push=()=>g(this.el,\"forward\",this.component,this.componentProps)}componentDidLoad(){console.warn('[DEPRECATED][ion-nav-push] `<ion-nav-push component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\">` instead.')}render(){return Object(n.i)(n.a,{onClick:this.push})}get el(){return Object(n.f)(this)}},j=class{constructor(e){Object(n.l)(this,e),this.setRoot=()=>g(this.el,\"root\",this.component,this.componentProps)}componentDidLoad(){console.warn('[DEPRECATED][ion-nav-set-root] `<ion-nav-set-root component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\" routerDirection=\"root\">` instead.')}render(){return Object(n.i)(n.a,{onClick:this.setRoot})}get el(){return Object(n.f)(this)}}}}]);","extractedComments":[]}