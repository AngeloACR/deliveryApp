{"map":"{\"version\":3,\"sources\":[\"/home/angeloacr/Proyectos/Tuk/ionic-taxi-4/admin/node_modules/@ionic/core/dist/esm/shadow-css-9e778f69-c68d0961.js.pre-build-optimizer.js\"],\"names\":[\"__webpack_require__\",\"r\",\"__webpack_exports__\",\"d\",\"scopeCss\",\"_parenSuffix\",\"_cssColonHostRe\",\"RegExp\",\"_cssColonHostContextRe\",\"_cssColonSlottedRe\",\"_polyfillHostNoCombinatorRe\",\"_shadowDOMSelectorsRe\",\"_polyfillHostRe\",\"_colonHostRe\",\"_colonSlottedRe\",\"_colonHostContextRe\",\"_commentRe\",\"_commentWithHashRe\",\"_ruleRe\",\"_curlyRe\",\"processRules\",\"input\",\"ruleCallback\",\"inputWithEscapedBlocks\",\"escapeBlocks\",\"nextBlockIndex\",\"escapedString\",\"replace\",\"m\",\"selector\",\"content\",\"suffix\",\"contentPrefix\",\"startsWith\",\"blocks\",\"substring\",\"length\",\"rule\",\"inputParts\",\"split\",\"resultParts\",\"escapedBlocks\",\"bracketCount\",\"currentBlockParts\",\"partIndex\",\"part\",\"push\",\"join\",\"convertColonRule\",\"cssText\",\"regExp\",\"partReplacer\",\"parts\",\"i\",\"p\",\"trim\",\"_polyfillHost\",\"colonHostPartReplacer\",\"host\",\"colonHostContextPartReplacer\",\"indexOf\",\"scopeSelectors\",\"scopeSelectorText\",\"hostSelector\",\"slotSelector\",\"commentOriginalSelector\",\"map\",\"shallowPart\",\"scopeSelector\",\"makeScopeMatcher\",\"test\",\"selectorNeedsScoping\",\"className\",\"_\",\"_scopeSelectorPart\",\"scopedP\",\"lastIndex\",\"replaceBy\",\"before\",\"colon\",\"after\",\"applySimpleSelectorScope\",\"t\",\"matches\",\"match\",\"safeContent\",\"placeholders\",\"index\",\"keep\",\"pseudo\",\"exp\",\"safeSelector\",\"res\",\"scopedSelector\",\"startIndex\",\"sep\",\"shouldScope\",\"exec\",\"separator\",\"slice\",\"restoreSafeSelector\",\"applyStrictSelectorScope\",\"scopeId\",\"hostScopeId\",\"slotScopeId\",\"commentsWithHash\",\"extractCommentsWithHash\",\"stripComments\",\"orgSelectors\",\"processCommentedSelector\",\"placeholder\",\"comment\",\"scopedCssText\",\"reduce\",\"result\",\"pattern\",\"convertShadowDOMSelectors\",\"slotAttr\",\"compound\",\"convertColonSlotted\",\"convertColonHostContext\",\"convertColonHost\",\"insertPolyfillHostInCssText\",\"scopeCssText\",\"forEach\"],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n *\\n * Use of this source code is governed by an MIT-style license that can be\\n * found in the LICENSE file at https://angular.io/license\\n *\\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\\n */\\nconst safeSelector = (selector) => {\\n    const placeholders = [];\\n    let index = 0;\\n    let content;\\n    // Replaces attribute selectors with placeholders.\\n    // The WS in [attr=\\\"va lue\\\"] would otherwise be interpreted as a selector separator.\\n    selector = selector.replace(/(\\\\[[^\\\\]]*\\\\])/g, (_, keep) => {\\n        const replaceBy = `__ph-${index}__`;\\n        placeholders.push(keep);\\n        index++;\\n        return replaceBy;\\n    });\\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\\n    // WS and \\\"+\\\" would otherwise be interpreted as selector separators.\\n    content = selector.replace(/(:nth-[-\\\\w]+)(\\\\([^)]+\\\\))/g, (_, pseudo, exp) => {\\n        const replaceBy = `__ph-${index}__`;\\n        placeholders.push(exp);\\n        index++;\\n        return pseudo + replaceBy;\\n    });\\n    const ss = {\\n        content,\\n        placeholders,\\n    };\\n    return ss;\\n};\\nconst restoreSafeSelector = (placeholders, content) => {\\n    return content.replace(/__ph-(\\\\d+)__/g, (_, index) => placeholders[+index]);\\n};\\nconst _polyfillHost = '-shadowcsshost';\\nconst _polyfillSlotted = '-shadowcssslotted';\\n// note: :host-context pre-processed to -shadowcsshostcontext.\\nconst _polyfillHostContext = '-shadowcsscontext';\\nconst _parenSuffix = ')(?:\\\\\\\\((' +\\n    '(?:\\\\\\\\([^)(]*\\\\\\\\)|[^)(]*)+?' +\\n    ')\\\\\\\\))?([^,{]*)';\\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\\\s]*)/;\\nconst _shadowDOMSelectorsRe = [\\n    /::shadow/g,\\n    /::content/g\\n];\\nconst _selectorReSuffix = '([>\\\\\\\\s~+\\\\[.,{:][\\\\\\\\s\\\\\\\\S]*)?$';\\nconst _polyfillHostRe = /-shadowcsshost/gim;\\nconst _colonHostRe = /:host/gim;\\nconst _colonSlottedRe = /::slotted/gim;\\nconst _colonHostContextRe = /:host-context/gim;\\nconst _commentRe = /\\\\/\\\\*\\\\s*[\\\\s\\\\S]*?\\\\*\\\\//g;\\nconst stripComments = (input) => {\\n    return input.replace(_commentRe, '');\\n};\\nconst _commentWithHashRe = /\\\\/\\\\*\\\\s*#\\\\s*source(Mapping)?URL=[\\\\s\\\\S]+?\\\\*\\\\//g;\\nconst extractCommentsWithHash = (input) => {\\n    return input.match(_commentWithHashRe) || [];\\n};\\nconst _ruleRe = /(\\\\s*)([^;\\\\{\\\\}]+?)(\\\\s*)((?:{%BLOCK%}?\\\\s*;?)|(?:\\\\s*;))/g;\\nconst _curlyRe = /([{}])/g;\\nconst OPEN_CURLY = '{';\\nconst CLOSE_CURLY = '}';\\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\\nconst processRules = (input, ruleCallback) => {\\n    const inputWithEscapedBlocks = escapeBlocks(input);\\n    let nextBlockIndex = 0;\\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\\n        const selector = m[2];\\n        let content = '';\\n        let suffix = m[4];\\n        let contentPrefix = '';\\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\\n            contentPrefix = '{';\\n        }\\n        const cssRule = {\\n            selector,\\n            content\\n        };\\n        const rule = ruleCallback(cssRule);\\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\\n    });\\n};\\nconst escapeBlocks = (input) => {\\n    const inputParts = input.split(_curlyRe);\\n    const resultParts = [];\\n    const escapedBlocks = [];\\n    let bracketCount = 0;\\n    let currentBlockParts = [];\\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\\n        const part = inputParts[partIndex];\\n        if (part === CLOSE_CURLY) {\\n            bracketCount--;\\n        }\\n        if (bracketCount > 0) {\\n            currentBlockParts.push(part);\\n        }\\n        else {\\n            if (currentBlockParts.length > 0) {\\n                escapedBlocks.push(currentBlockParts.join(''));\\n                resultParts.push(BLOCK_PLACEHOLDER);\\n                currentBlockParts = [];\\n            }\\n            resultParts.push(part);\\n        }\\n        if (part === OPEN_CURLY) {\\n            bracketCount++;\\n        }\\n    }\\n    if (currentBlockParts.length > 0) {\\n        escapedBlocks.push(currentBlockParts.join(''));\\n        resultParts.push(BLOCK_PLACEHOLDER);\\n    }\\n    const strEscapedBlocks = {\\n        escapedString: resultParts.join(''),\\n        blocks: escapedBlocks\\n    };\\n    return strEscapedBlocks;\\n};\\nconst insertPolyfillHostInCssText = (selector) => {\\n    selector = selector\\n        .replace(_colonHostContextRe, _polyfillHostContext)\\n        .replace(_colonHostRe, _polyfillHost)\\n        .replace(_colonSlottedRe, _polyfillSlotted);\\n    return selector;\\n};\\nconst convertColonRule = (cssText, regExp, partReplacer) => {\\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\\n    return cssText.replace(regExp, (...m) => {\\n        if (m[2]) {\\n            const parts = m[2].split(',');\\n            const r = [];\\n            for (let i = 0; i < parts.length; i++) {\\n                const p = parts[i].trim();\\n                if (!p)\\n                    break;\\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\\n            }\\n            return r.join(',');\\n        }\\n        else {\\n            return _polyfillHostNoCombinator + m[3];\\n        }\\n    });\\n};\\nconst colonHostPartReplacer = (host, part, suffix) => {\\n    return host + part.replace(_polyfillHost, '') + suffix;\\n};\\nconst convertColonHost = (cssText) => {\\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\\n};\\nconst colonHostContextPartReplacer = (host, part, suffix) => {\\n    if (part.indexOf(_polyfillHost) > -1) {\\n        return colonHostPartReplacer(host, part, suffix);\\n    }\\n    else {\\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\\n    }\\n};\\nconst convertColonSlotted = (cssText, slotAttr) => {\\n    const regExp = _cssColonSlottedRe;\\n    return cssText.replace(regExp, (...m) => {\\n        if (m[2]) {\\n            const compound = m[2].trim();\\n            const suffix = m[3];\\n            const sel = '.' + slotAttr + ' > ' + compound + suffix;\\n            return sel;\\n        }\\n        else {\\n            return _polyfillHostNoCombinator + m[3];\\n        }\\n    });\\n};\\nconst convertColonHostContext = (cssText) => {\\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\\n};\\nconst convertShadowDOMSelectors = (cssText) => {\\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\\n};\\nconst makeScopeMatcher = (scopeSelector) => {\\n    const lre = /\\\\[/g;\\n    const rre = /\\\\]/g;\\n    scopeSelector = scopeSelector.replace(lre, '\\\\\\\\[').replace(rre, '\\\\\\\\]');\\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\\n};\\nconst selectorNeedsScoping = (selector, scopeSelector) => {\\n    const re = makeScopeMatcher(scopeSelector);\\n    return !re.test(selector);\\n};\\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\\n    _polyfillHostRe.lastIndex = 0;\\n    if (_polyfillHostRe.test(selector)) {\\n        const replaceBy = `.${hostSelector}`;\\n        return selector\\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\\n                return before + replaceBy + colon + after;\\n            });\\n        })\\n            .replace(_polyfillHostRe, replaceBy + ' ');\\n    }\\n    return scopeSelector + ' ' + selector;\\n};\\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\\n    const isRe = /\\\\[is=([^\\\\]]*)\\\\]/g;\\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\\n    const className = '.' + scopeSelector;\\n    const _scopeSelectorPart = (p) => {\\n        let scopedP = p.trim();\\n        if (!scopedP) {\\n            return '';\\n        }\\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\\n        }\\n        else {\\n            // remove :host since it should be unnecessary\\n            const t = p.replace(_polyfillHostRe, '');\\n            if (t.length > 0) {\\n                const matches = t.match(/([^:]*)(:*)(.*)/);\\n                if (matches) {\\n                    scopedP = matches[1] + className + matches[2] + matches[3];\\n                }\\n            }\\n        }\\n        return scopedP;\\n    };\\n    const safeContent = safeSelector(selector);\\n    selector = safeContent.content;\\n    let scopedSelector = '';\\n    let startIndex = 0;\\n    let res;\\n    const sep = /( |>|\\\\+|~(?!=))\\\\s*/g;\\n    // If a selector appears before :host it should not be shimmed as it\\n    // matches on ancestor elements and not on elements in the host's shadow\\n    // `:host-context(div)` is transformed to\\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\\n    // Historically `component-tag:host` was matching the component so we also want to preserve\\n    // this behavior to avoid breaking legacy apps (it should not match).\\n    // The behavior should be:\\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\\n    //   `:host-context(tag)`)\\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\\n    let shouldScope = !hasHost;\\n    while ((res = sep.exec(selector)) !== null) {\\n        const separator = res[1];\\n        const part = selector.slice(startIndex, res.index).trim();\\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\\n        scopedSelector += `${scopedPart} ${separator} `;\\n        startIndex = sep.lastIndex;\\n    }\\n    const part = selector.substring(startIndex);\\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\\n    // replace the placeholders with their original values\\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\\n};\\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\\n    return selector.split(',')\\n        .map(shallowPart => {\\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\\n            return shallowPart.trim();\\n        }\\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\\n        }\\n        else {\\n            return shallowPart.trim();\\n        }\\n    })\\n        .join(', ');\\n};\\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\\n    return processRules(cssText, (rule) => {\\n        let selector = rule.selector;\\n        let content = rule.content;\\n        if (rule.selector[0] !== '@') {\\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\\n        }\\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\\n            rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\\n        }\\n        const cssRule = {\\n            selector: selector.replace(/\\\\s{2,}/g, ' ').trim(),\\n            content\\n        };\\n        return cssRule;\\n    });\\n};\\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\\n    cssText = insertPolyfillHostInCssText(cssText);\\n    cssText = convertColonHost(cssText);\\n    cssText = convertColonHostContext(cssText);\\n    cssText = convertColonSlotted(cssText, slotScopeId);\\n    cssText = convertShadowDOMSelectors(cssText);\\n    if (scopeId) {\\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\\n    }\\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\\n    cssText = cssText.replace(/>\\\\s*\\\\*\\\\s+([^{, ]+)/gm, ' $1 ');\\n    return cssText.trim();\\n};\\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\\n    const hostScopeId = scopeId + '-h';\\n    const slotScopeId = scopeId + '-s';\\n    const commentsWithHash = extractCommentsWithHash(cssText);\\n    cssText = stripComments(cssText);\\n    const orgSelectors = [];\\n    if (commentOriginalSelector) {\\n        const processCommentedSelector = (rule) => {\\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\\n            const comment = `/*!@${rule.selector}*/`;\\n            orgSelectors.push({ placeholder, comment });\\n            rule.selector = placeholder + rule.selector;\\n            return rule;\\n        };\\n        cssText = processRules(cssText, rule => {\\n            if (rule.selector[0] !== '@') {\\n                return processCommentedSelector(rule);\\n            }\\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\\n                rule.content = processRules(rule.content, processCommentedSelector);\\n                return rule;\\n            }\\n            return rule;\\n        });\\n    }\\n    const scopedCssText = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\\n    cssText = [scopedCssText, ...commentsWithHash].join('\\\\n');\\n    if (commentOriginalSelector) {\\n        orgSelectors.forEach(({ placeholder, comment }) => {\\n            cssText = cssText.replace(placeholder, comment);\\n        });\\n    }\\n    return cssText;\\n};\\n\\nexport { scopeCss };\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{ZHuR:function(t,s,e){\"use strict\";e.r(s),e.d(s,\"scopeCss\",(function(){return W}));const o=\")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\",c=new RegExp(\"(-shadowcsshost\"+o,\"gim\"),n=new RegExp(\"(-shadowcsscontext\"+o,\"gim\"),r=new RegExp(\"(-shadowcssslotted\"+o,\"gim\"),a=/-shadowcsshost-no-combinator([^\\s]*)/,l=[/::shadow/g,/::content/g],h=/-shadowcsshost/gim,i=/:host/gim,p=/::slotted/gim,d=/:host-context/gim,u=/\\/\\*\\s*[\\s\\S]*?\\*\\//g,g=/\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g,m=/(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g,w=/([{}])/g,f=(t,s)=>{const e=_(t);let o=0;return e.escapedString.replace(m,(...t)=>{const c=t[2];let n=\"\",r=t[4],a=\"\";r&&r.startsWith(\"{%BLOCK%\")&&(n=e.blocks[o++],r=r.substring(\"%BLOCK%\".length+1),a=\"{\");const l=s({selector:c,content:n});return`${t[1]}${l.selector}${t[3]}${a}${l.content}${r}`})},_=t=>{const s=t.split(w),e=[],o=[];let c=0,n=[];for(let r=0;r<s.length;r++){const t=s[r];\"}\"===t&&c--,c>0?n.push(t):(n.length>0&&(o.push(n.join(\"\")),e.push(\"%BLOCK%\"),n=[]),e.push(t)),\"{\"===t&&c++}return n.length>0&&(o.push(n.join(\"\")),e.push(\"%BLOCK%\")),{escapedString:e.join(\"\"),blocks:o}},x=(t,s,e)=>t.replace(s,(...t)=>{if(t[2]){const s=t[2].split(\",\"),o=[];for(let c=0;c<s.length;c++){const n=s[c].trim();if(!n)break;o.push(e(\"-shadowcsshost-no-combinator\",n,t[3]))}return o.join(\",\")}return\"-shadowcsshost-no-combinator\"+t[3]}),b=(t,s,e)=>t+s.replace(\"-shadowcsshost\",\"\")+e,$=(t,s,e)=>s.indexOf(\"-shadowcsshost\")>-1?b(t,s,e):t+s+e+\", \"+s+\" \"+t+e,O=(t,s,e,o,c)=>f(t,t=>{let c=t.selector,n=t.content;return\"@\"!==t.selector[0]?c=((t,s,e,o)=>t.split(\",\").map(t=>o&&t.indexOf(\".\"+o)>-1?t.trim():((t,s)=>!(t=>(t=t.replace(/\\[/g,\"\\\\[\").replace(/\\]/g,\"\\\\]\"),new RegExp(\"^(\"+t+\")([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\",\"m\")))(s).test(t))(t,s)?((t,s,e)=>{const o=\".\"+(s=s.replace(/\\[is=([^\\]]*)\\]/g,(t,...s)=>s[0])),c=t=>{let c=t.trim();if(!c)return\"\";if(t.indexOf(\"-shadowcsshost-no-combinator\")>-1)c=((t,s,e)=>{if(h.lastIndex=0,h.test(t)){const s=`.${e}`;return t.replace(a,(t,e)=>e.replace(/([^:]*)(:*)(.*)/,(t,e,o,c)=>e+s+o+c)).replace(h,s+\" \")}return s+\" \"+t})(t,s,e);else{const s=t.replace(h,\"\");if(s.length>0){const t=s.match(/([^:]*)(:*)(.*)/);t&&(c=t[1]+o+t[2]+t[3])}}return c},n=(t=>{const s=[];let e,o=0;return{content:e=(t=t.replace(/(\\[[^\\]]*\\])/g,(t,e)=>{const c=`__ph-${o}__`;return s.push(e),o++,c})).replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g,(t,e,c)=>{const n=`__ph-${o}__`;return s.push(c),o++,e+n}),placeholders:s}})(t);let r,l=\"\",i=0;const p=/( |>|\\+|~(?!=))\\s*/g;let d=!((t=n.content).indexOf(\"-shadowcsshost-no-combinator\")>-1);for(;null!==(r=p.exec(t));){const s=r[1],e=t.slice(i,r.index).trim();l+=`${(d=d||e.indexOf(\"-shadowcsshost-no-combinator\")>-1)?c(e):e} ${s} `,i=p.lastIndex}const u=t.substring(i);return l+=(d=d||u.indexOf(\"-shadowcsshost-no-combinator\")>-1)?c(u):u,((t,s)=>s.replace(/__ph-(\\d+)__/g,(s,e)=>t[+e]))(n.placeholders,l)})(t,s,e).trim():t.trim()).join(\", \"))(t.selector,s,e,o):(t.selector.startsWith(\"@media\")||t.selector.startsWith(\"@supports\")||t.selector.startsWith(\"@page\")||t.selector.startsWith(\"@document\"))&&(n=O(t.content,s,e,o)),{selector:c.replace(/\\s{2,}/g,\" \").trim(),content:n}}),W=(t,s,e)=>{const o=s+\"-h\",a=s+\"-s\",h=(t=>t.match(g)||[])(t);t=(t=>t.replace(u,\"\"))(t);const m=[];if(e){const s=t=>{const s=`/*!@___${m.length}___*/`;return m.push({placeholder:s,comment:`/*!@${t.selector}*/`}),t.selector=s+t.selector,t};t=f(t,t=>\"@\"!==t.selector[0]?s(t):t.selector.startsWith(\"@media\")||t.selector.startsWith(\"@supports\")||t.selector.startsWith(\"@page\")||t.selector.startsWith(\"@document\")?(t.content=f(t.content,s),t):t)}const w=((t,s,e,o,a)=>(t=(t=>l.reduce((t,s)=>t.replace(s,\" \"),t))(t=((t,s)=>t.replace(r,(...t)=>{if(t[2]){const e=t[2].trim();return\".\"+s+\" > \"+e+t[3]}return\"-shadowcsshost-no-combinator\"+t[3]}))(t=(t=>x(t,n,$))(t=(t=>x(t,c,b))(t=(t=>t=t.replace(d,\"-shadowcsscontext\").replace(i,\"-shadowcsshost\").replace(p,\"-shadowcssslotted\"))(t))),o)),s&&(t=O(t,s,e,o)),(t=(t=t.replace(/-shadowcsshost-no-combinator/g,`.${e}`)).replace(/>\\s*\\*\\s+([^{, ]+)/gm,\" $1 \")).trim()))(t,s,o,a);return t=[w,...h].join(\"\\n\"),e&&m.forEach(({placeholder:s,comment:e})=>{t=t.replace(s,e)}),t}}}]);","extractedComments":[]}