{"map":"{\"version\":3,\"sources\":[\"/home/angeloacr/Proyectos/Tuk/ionic-taxi-4/admin/node_modules/@ionic/core/dist/esm/ion-refresher_2-md.entry.js.pre-build-optimizer.js\"],\"names\":[\"__webpack_require__\",\"r\",\"__webpack_exports__\",\"d\",\"Refresher\",\"RefresherContent\",\"_core_c02a05e9_js__WEBPACK_IMPORTED_MODULE_0__\",\"_config_503c2549_js__WEBPACK_IMPORTED_MODULE_1__\",\"_index_064a03a9_js__WEBPACK_IMPORTED_MODULE_2__\",\"[object Object]\",\"hostRef\",\"Object\",\"this\",\"appliedStyles\",\"didStart\",\"progress\",\"state\",\"pullMin\",\"pullMax\",\"closeDuration\",\"snapbackDuration\",\"pullFactor\",\"disabled\",\"ionRefresh\",\"ionPull\",\"ionStart\",\"gesture\",\"setDisabled\",\"el\",\"getAttribute\",\"console\",\"error\",\"contentEl\",\"closest\",\"scrollEl\",\"getScrollElement\",\"Promise\",\"resolve\",\"then\",\"bind\",\"createGesture\",\"gestureName\",\"gesturePriority\",\"direction\",\"threshold\",\"passive\",\"canStart\",\"onStart\",\"onMove\",\"ev\",\"onEnd\",\"disabledChanged\",\"undefined\",\"destroy\",\"close\",\"scrollTop\",\"detail\",\"event\",\"touches\",\"length\",\"Number\",\"isNaN\",\"deltaY\",\"setCss\",\"cancelable\",\"preventDefault\",\"emit\",\"beginRefresh\",\"cancel\",\"complete\",\"delay\",\"setTimeout\",\"y\",\"duration\",\"overflowVisible\",\"style\",\"transform\",\"transitionDuration\",\"transitionDelay\",\"overflow\",\"mode\",\"slot\",\"class\",\"refresher-active\",\"refresher-pulling\",\"refresher-ready\",\"refresher-refreshing\",\"refresher-cancelling\",\"refresher-completing\",\"watchers\",\"pullingIcon\",\"get\",\"refreshingSpinner\",\"icon\",\"lazy\",\"pullingText\",\"innerHTML\",\"name\",\"refreshingText\"],\"mappings\":\"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\",\"sourcesContent\":[\"import { r as registerInstance, c as createEvent, w as writeTask, d as getIonMode, h, e as getElement, H as Host } from './core-c02a05e9.js';\\nimport { b as config } from './config-503c2549.js';\\nimport { s as sanitizeDOMString } from './index-064a03a9.js';\\n\\nconst Refresher = class {\\n    constructor(hostRef) {\\n        registerInstance(this, hostRef);\\n        this.appliedStyles = false;\\n        this.didStart = false;\\n        this.progress = 0;\\n        /**\\n         * The current state which the refresher is in. The refresher's states include:\\n         *\\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\\n         */\\n        this.state = 1 /* Inactive */;\\n        /**\\n         * The minimum distance the user must pull down until the\\n         * refresher will go into the `refreshing` state.\\n         */\\n        this.pullMin = 60;\\n        /**\\n         * The maximum distance of the pull until the refresher\\n         * will automatically go into the `refreshing` state.\\n         * Defaults to the result of `pullMin + 60`.\\n         */\\n        this.pullMax = this.pullMin + 60;\\n        /**\\n         * Time it takes to close the refresher.\\n         */\\n        this.closeDuration = '280ms';\\n        /**\\n         * Time it takes the refresher to to snap back to the `refreshing` state.\\n         */\\n        this.snapbackDuration = '280ms';\\n        /**\\n         * How much to multiply the pull speed by. To slow the pull animation down,\\n         * pass a number less than `1`. To speed up the pull, pass a number greater\\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\\n         * If a negative value is passed in, the factor will be `1` instead.\\n         *\\n         * For example: If the value passed is `1.2` and the content is dragged by\\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\\n         * will be `8` pixels, less than the amount the cursor has moved.\\n         */\\n        this.pullFactor = 1;\\n        /**\\n         * If `true`, the refresher will be hidden.\\n         */\\n        this.disabled = false;\\n        this.ionRefresh = createEvent(this, \\\"ionRefresh\\\", 7);\\n        this.ionPull = createEvent(this, \\\"ionPull\\\", 7);\\n        this.ionStart = createEvent(this, \\\"ionStart\\\", 7);\\n    }\\n    disabledChanged() {\\n        if (this.gesture) {\\n            this.gesture.setDisabled(this.disabled);\\n        }\\n    }\\n    async connectedCallback() {\\n        if (this.el.getAttribute('slot') !== 'fixed') {\\n            console.error('Make sure you use: <ion-refresher slot=\\\"fixed\\\">');\\n            return;\\n        }\\n        const contentEl = this.el.closest('ion-content');\\n        if (!contentEl) {\\n            console.error('<ion-refresher> must be used inside an <ion-content>');\\n            return;\\n        }\\n        this.scrollEl = await contentEl.getScrollElement();\\n        this.gesture = (await import('./index-2c4a5477.js')).createGesture({\\n            el: contentEl,\\n            gestureName: 'refresher',\\n            gesturePriority: 10,\\n            direction: 'y',\\n            threshold: 20,\\n            passive: false,\\n            canStart: () => this.canStart(),\\n            onStart: () => this.onStart(),\\n            onMove: ev => this.onMove(ev),\\n            onEnd: () => this.onEnd(),\\n        });\\n        this.disabledChanged();\\n    }\\n    disconnectedCallback() {\\n        this.scrollEl = undefined;\\n        if (this.gesture) {\\n            this.gesture.destroy();\\n            this.gesture = undefined;\\n        }\\n    }\\n    /**\\n     * Call `complete()` when your async operation has completed.\\n     * For example, the `refreshing` state is while the app is performing\\n     * an asynchronous operation, such as receiving more data from an\\n     * AJAX request. Once the data has been received, you then call this\\n     * method to signify that the refreshing has completed and to close\\n     * the refresher. This method also changes the refresher's state from\\n     * `refreshing` to `completing`.\\n     */\\n    async complete() {\\n        this.close(32 /* Completing */, '120ms');\\n    }\\n    /**\\n     * Changes the refresher's state from `refreshing` to `cancelling`.\\n     */\\n    async cancel() {\\n        this.close(16 /* Cancelling */, '');\\n    }\\n    /**\\n     * A number representing how far down the user has pulled.\\n     * The number `0` represents the user hasn't pulled down at all. The\\n     * number `1`, and anything greater than `1`, represents that the user\\n     * has pulled far enough down that when they let go then the refresh will\\n     * happen. If they let go and the number is less than `1`, then the\\n     * refresh will not happen, and the content will return to it's original\\n     * position.\\n     */\\n    getProgress() {\\n        return Promise.resolve(this.progress);\\n    }\\n    canStart() {\\n        if (!this.scrollEl) {\\n            return false;\\n        }\\n        if (this.state !== 1 /* Inactive */) {\\n            return false;\\n        }\\n        // if the scrollTop is greater than zero then it's\\n        // not possible to pull the content down yet\\n        if (this.scrollEl.scrollTop > 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n    onStart() {\\n        this.progress = 0;\\n        this.state = 1 /* Inactive */;\\n    }\\n    onMove(detail) {\\n        if (!this.scrollEl) {\\n            return;\\n        }\\n        // this method can get called like a bazillion times per second,\\n        // so it's built to be as efficient as possible, and does its\\n        // best to do any DOM read/writes only when absolutely necessary\\n        // if multi-touch then get out immediately\\n        const ev = detail.event;\\n        if (ev.touches && ev.touches.length > 1) {\\n            return;\\n        }\\n        // do nothing if it's actively refreshing\\n        // or it's in the way of closing\\n        // or this was never a startY\\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\\n            return;\\n        }\\n        const pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\\n        const deltaY = detail.deltaY * pullFactor;\\n        // don't bother if they're scrolling up\\n        // and have not already started dragging\\n        if (deltaY <= 0) {\\n            // the current Y is higher than the starting Y\\n            // so they scrolled up enough to be ignored\\n            this.progress = 0;\\n            this.state = 1 /* Inactive */;\\n            if (this.appliedStyles) {\\n                // reset the styles only if they were applied\\n                this.setCss(0, '', false, '');\\n                return;\\n            }\\n            return;\\n        }\\n        if (this.state === 1 /* Inactive */) {\\n            // this refresh is not already actively pulling down\\n            // get the content's scrollTop\\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\\n            // if the scrollTop is greater than zero then it's\\n            // not possible to pull the content down yet\\n            if (scrollHostScrollTop > 0) {\\n                this.progress = 0;\\n                return;\\n            }\\n            // content scrolled all the way to the top, and dragging down\\n            this.state = 2 /* Pulling */;\\n        }\\n        // prevent native scroll events\\n        if (ev.cancelable) {\\n            ev.preventDefault();\\n        }\\n        // the refresher is actively pulling at this point\\n        // move the scroll element within the content element\\n        this.setCss(deltaY, '0ms', true, '');\\n        if (deltaY === 0) {\\n            // don't continue if there's no delta yet\\n            this.progress = 0;\\n            return;\\n        }\\n        const pullMin = this.pullMin;\\n        // set pull progress\\n        this.progress = deltaY / pullMin;\\n        // emit \\\"start\\\" if it hasn't started yet\\n        if (!this.didStart) {\\n            this.didStart = true;\\n            this.ionStart.emit();\\n        }\\n        // emit \\\"pulling\\\" on every move\\n        this.ionPull.emit();\\n        // do nothing if the delta is less than the pull threshold\\n        if (deltaY < pullMin) {\\n            // ensure it stays in the pulling state, cuz its not ready yet\\n            this.state = 2 /* Pulling */;\\n            return;\\n        }\\n        if (deltaY > this.pullMax) {\\n            // they pulled farther than the max, so kick off the refresh\\n            this.beginRefresh();\\n            return;\\n        }\\n        // pulled farther than the pull min!!\\n        // it is now in the `ready` state!!\\n        // if they let go then it'll refresh, kerpow!!\\n        this.state = 4 /* Ready */;\\n        return;\\n    }\\n    onEnd() {\\n        // only run in a zone when absolutely necessary\\n        if (this.state === 4 /* Ready */) {\\n            // they pulled down far enough, so it's ready to refresh\\n            this.beginRefresh();\\n        }\\n        else if (this.state === 2 /* Pulling */) {\\n            // they were pulling down, but didn't pull down far enough\\n            // set the content back to it's original location\\n            // and close the refresher\\n            // set that the refresh is actively cancelling\\n            this.cancel();\\n        }\\n    }\\n    beginRefresh() {\\n        // assumes we're already back in a zone\\n        // they pulled down far enough, so it's ready to refresh\\n        this.state = 8 /* Refreshing */;\\n        // place the content in a hangout position while it thinks\\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\\n        // emit \\\"refresh\\\" because it was pulled down far enough\\n        // and they let go to begin refreshing\\n        this.ionRefresh.emit({\\n            complete: this.complete.bind(this)\\n        });\\n    }\\n    close(state, delay) {\\n        // create fallback timer incase something goes wrong with transitionEnd event\\n        setTimeout(() => {\\n            this.state = 1 /* Inactive */;\\n            this.progress = 0;\\n            this.didStart = false;\\n            this.setCss(0, '0ms', false, '');\\n        }, 600);\\n        // reset set the styles on the scroll element\\n        // set that the refresh is actively cancelling/completing\\n        this.state = state;\\n        this.setCss(0, this.closeDuration, true, delay);\\n        // TODO: stop gesture\\n    }\\n    setCss(y, duration, overflowVisible, delay) {\\n        this.appliedStyles = (y > 0);\\n        writeTask(() => {\\n            if (this.scrollEl) {\\n                const style = this.scrollEl.style;\\n                style.transform = ((y > 0) ? `translateY(${y}px) translateZ(0px)` : 'translateZ(0px)');\\n                style.transitionDuration = duration;\\n                style.transitionDelay = delay;\\n                style.overflow = (overflowVisible ? 'hidden' : '');\\n            }\\n        });\\n    }\\n    render() {\\n        const mode = getIonMode(this);\\n        return (h(Host, { slot: \\\"fixed\\\", class: {\\n                [mode]: true,\\n                // Used internally for styling\\n                [`refresher-${mode}`]: true,\\n                'refresher-active': this.state !== 1 /* Inactive */,\\n                'refresher-pulling': this.state === 2 /* Pulling */,\\n                'refresher-ready': this.state === 4 /* Ready */,\\n                'refresher-refreshing': this.state === 8 /* Refreshing */,\\n                'refresher-cancelling': this.state === 16 /* Cancelling */,\\n                'refresher-completing': this.state === 32 /* Completing */\\n            } }));\\n    }\\n    get el() { return getElement(this); }\\n    static get watchers() { return {\\n        \\\"disabled\\\": [\\\"disabledChanged\\\"]\\n    }; }\\n    static get style() { return \\\"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-icon,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-md .refresher-refreshing .spinner-crescent circle,.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line{stroke:var(--ion-text-color,#000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\\\"; }\\n};\\n\\nconst RefresherContent = class {\\n    constructor(hostRef) {\\n        registerInstance(this, hostRef);\\n    }\\n    componentWillLoad() {\\n        if (this.pullingIcon === undefined) {\\n            this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\\n        }\\n        if (this.refreshingSpinner === undefined) {\\n            const mode = getIonMode(this);\\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\\n        }\\n    }\\n    render() {\\n        return (h(Host, { class: getIonMode(this) }, h(\\\"div\\\", { class: \\\"refresher-pulling\\\" }, this.pullingIcon &&\\n            h(\\\"div\\\", { class: \\\"refresher-pulling-icon\\\" }, h(\\\"ion-icon\\\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\\n            h(\\\"div\\\", { class: \\\"refresher-pulling-text\\\", innerHTML: sanitizeDOMString(this.pullingText) })), h(\\\"div\\\", { class: \\\"refresher-refreshing\\\" }, this.refreshingSpinner &&\\n            h(\\\"div\\\", { class: \\\"refresher-refreshing-icon\\\" }, h(\\\"ion-spinner\\\", { name: this.refreshingSpinner })), this.refreshingText &&\\n            h(\\\"div\\\", { class: \\\"refresher-refreshing-text\\\", innerHTML: sanitizeDOMString(this.refreshingText) }))));\\n    }\\n};\\n\\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{RODS:function(e,r,s){\"use strict\";s.r(r),s.d(r,\"ion_refresher\",(function(){return h})),s.d(r,\"ion_refresher_content\",(function(){return l}));var t=s(\"MTfx\"),i=s(\"pcH8\"),n=s(\"5UIL\");const h=class{constructor(e){Object(t.l)(this,e),this.appliedStyles=!1,this.didStart=!1,this.progress=0,this.state=1,this.pullMin=60,this.pullMax=this.pullMin+60,this.closeDuration=\"280ms\",this.snapbackDuration=\"280ms\",this.pullFactor=1,this.disabled=!1,this.ionRefresh=Object(t.d)(this,\"ionRefresh\",7),this.ionPull=Object(t.d)(this,\"ionPull\",7),this.ionStart=Object(t.d)(this,\"ionStart\",7)}disabledChanged(){this.gesture&&this.gesture.setDisabled(this.disabled)}async connectedCallback(){if(\"fixed\"!==this.el.getAttribute(\"slot\"))return void console.error('Make sure you use: <ion-refresher slot=\"fixed\">');const e=this.el.closest(\"ion-content\");e?(this.scrollEl=await e.getScrollElement(),this.gesture=(await Promise.resolve().then(s.bind(null,\"VUZZ\"))).createGesture({el:e,gestureName:\"refresher\",gesturePriority:10,direction:\"y\",threshold:20,passive:!1,canStart:()=>this.canStart(),onStart:()=>this.onStart(),onMove:e=>this.onMove(e),onEnd:()=>this.onEnd()}),this.disabledChanged()):console.error(\"<ion-refresher> must be used inside an <ion-content>\")}disconnectedCallback(){this.scrollEl=void 0,this.gesture&&(this.gesture.destroy(),this.gesture=void 0)}async complete(){this.close(32,\"120ms\")}async cancel(){this.close(16,\"\")}getProgress(){return Promise.resolve(this.progress)}canStart(){return!(!this.scrollEl||1!==this.state||this.scrollEl.scrollTop>0)}onStart(){this.progress=0,this.state=1}onMove(e){if(!this.scrollEl)return;const r=e.event;if(r.touches&&r.touches.length>1)return;if(0!=(56&this.state))return;const s=Number.isNaN(this.pullFactor)||this.pullFactor<0?1:this.pullFactor,t=e.deltaY*s;if(t<=0)return this.progress=0,this.state=1,this.appliedStyles?void this.setCss(0,\"\",!1,\"\"):void 0;if(1===this.state){if(this.scrollEl.scrollTop>0)return void(this.progress=0);this.state=2}if(r.cancelable&&r.preventDefault(),this.setCss(t,\"0ms\",!0,\"\"),0===t)return void(this.progress=0);const i=this.pullMin;this.progress=t/i,this.didStart||(this.didStart=!0,this.ionStart.emit()),this.ionPull.emit(),t<i?this.state=2:t>this.pullMax?this.beginRefresh():this.state=4}onEnd(){4===this.state?this.beginRefresh():2===this.state&&this.cancel()}beginRefresh(){this.state=8,this.setCss(this.pullMin,this.snapbackDuration,!0,\"\"),this.ionRefresh.emit({complete:this.complete.bind(this)})}close(e,r){setTimeout(()=>{this.state=1,this.progress=0,this.didStart=!1,this.setCss(0,\"0ms\",!1,\"\")},600),this.state=e,this.setCss(0,this.closeDuration,!0,r)}setCss(e,r,s,i){this.appliedStyles=e>0,Object(t.m)(()=>{if(this.scrollEl){const t=this.scrollEl.style;t.transform=e>0?`translateY(${e}px) translateZ(0px)`:\"translateZ(0px)\",t.transitionDuration=r,t.transitionDelay=i,t.overflow=s?\"hidden\":\"\"}})}render(){const e=Object(t.e)(this);return Object(t.i)(t.a,{slot:\"fixed\",class:{[e]:!0,[`refresher-${e}`]:!0,\"refresher-active\":1!==this.state,\"refresher-pulling\":2===this.state,\"refresher-ready\":4===this.state,\"refresher-refreshing\":8===this.state,\"refresher-cancelling\":16===this.state,\"refresher-completing\":32===this.state}})}get el(){return Object(t.f)(this)}static get watchers(){return{disabled:[\"disabledChanged\"]}}static get style(){return\"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-icon,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-md .refresher-refreshing .spinner-crescent circle,.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line{stroke:var(--ion-text-color,#000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"}},l=class{constructor(e){Object(t.l)(this,e)}componentWillLoad(){if(void 0===this.pullingIcon&&(this.pullingIcon=i.b.get(\"refreshingIcon\",\"arrow-down\")),void 0===this.refreshingSpinner){const e=Object(t.e)(this);this.refreshingSpinner=i.b.get(\"refreshingSpinner\",i.b.get(\"spinner\",\"ios\"===e?\"lines\":\"crescent\"))}}render(){return Object(t.i)(t.a,{class:Object(t.e)(this)},Object(t.i)(\"div\",{class:\"refresher-pulling\"},this.pullingIcon&&Object(t.i)(\"div\",{class:\"refresher-pulling-icon\"},Object(t.i)(\"ion-icon\",{icon:this.pullingIcon,lazy:!1})),this.pullingText&&Object(t.i)(\"div\",{class:\"refresher-pulling-text\",innerHTML:Object(n.a)(this.pullingText)})),Object(t.i)(\"div\",{class:\"refresher-refreshing\"},this.refreshingSpinner&&Object(t.i)(\"div\",{class:\"refresher-refreshing-icon\"},Object(t.i)(\"ion-spinner\",{name:this.refreshingSpinner})),this.refreshingText&&Object(t.i)(\"div\",{class:\"refresher-refreshing-text\",innerHTML:Object(n.a)(this.refreshingText)})))}}}}]);","extractedComments":[]}