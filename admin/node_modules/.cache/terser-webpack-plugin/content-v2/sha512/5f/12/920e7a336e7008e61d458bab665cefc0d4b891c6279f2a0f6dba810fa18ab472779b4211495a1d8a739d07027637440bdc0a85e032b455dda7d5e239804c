{"map":"{\"version\":3,\"sources\":[\"/home/angeloacr/Proyectos/Tuk/ionic-taxi-4/admin/node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js.pre-build-optimizer.js\"],\"names\":[\"__webpack_require__\",\"r\",\"__webpack_exports__\",\"d\",\"VirtualScroll\",\"_core_c02a05e9_js__WEBPACK_IMPORTED_MODULE_0__\",\"createNode\",\"el\",\"type\",\"template\",\"getTemplate\",\"ownerDocument\",\"importNode\",\"content\",\"children\",\"querySelector\",\"calcCells\",\"items\",\"itemHeight\",\"headerHeight\",\"footerHeight\",\"headerFn\",\"footerFn\",\"approxHeaderHeight\",\"approxFooterHeight\",\"approxItemHeight\",\"j\",\"offset\",\"len\",\"cells\",\"end\",\"i\",\"item\",\"value\",\"push\",\"index\",\"height\",\"reads\",\"visible\",\"[object Object]\",\"hostRef\",\"Object\",\"this\",\"range\",\"length\",\"viewportHeight\",\"virtualDom\",\"isEnabled\",\"viewportOffset\",\"currentScrollTop\",\"indexDirty\",\"lastItemLen\",\"totalHeight\",\"onScroll\",\"updateVirtualScroll\",\"contentEl\",\"closest\",\"scrollEl\",\"getScrollElement\",\"updateState\",\"console\",\"error\",\"undefined\",\"Promise\",\"resolve\",\"heightIndex\",\"cell\",\"find\",\"c\",\"positionForIndex\",\"getHeightIndex\",\"cellIndex\",\"findIndex\",\"findCellIndex\",\"dst\",\"src\",\"inplaceUpdate\",\"Math\",\"max\",\"scheduleUpdate\",\"checkRange\",\"timerUpdate\",\"clearTimeout\",\"readVS\",\"bind\",\"writeVS\",\"topOffset\",\"node\",\"offsetTop\",\"parentElement\",\"offsetHeight\",\"scrollTop\",\"dirtyIndex\",\"viewport\",\"vierportHeight\",\"margin\",\"top\",\"bottom\",\"getViewport\",\"buffer\",\"topPos\",\"bottomPos\",\"min\",\"getRange\",\"currentRange\",\"getShouldUpdate\",\"dom\",\"change\",\"toMutate\",\"n\",\"pool\",\"filter\",\"forEach\",\"updateVDom\",\"nodeRender\",\"updateCellHeight\",\"Array\",\"from\",\"tagName\",\"childrenNu\",\"child\",\"newChild\",\"classList\",\"add\",\"appendChild\",\"style\",\"transform\",\"remove\",\"doRender\",\"domRender\",\"renderItem\",\"forceUpdate\",\"update\",\"window\",\"getComputedStyle\",\"parseFloat\",\"getPropertyValue\",\"setCellHeight\",\"componentOnReady\",\"then\",\"setTimeout\",\"shouldEnable\",\"enableScrollEvents\",\"Infinity\",\"calcHeightIndex\",\"buf\",\"Uint32Array\",\"newBuf\",\"set\",\"subarray\",\"resizeBuffer\",\"acum\",\"shouldListen\",\"rmEvent\",\"addEventListener\",\"removeEventListener\",\"renderHeader\",\"renderFooter\",\"VirtualProxy\",\"map\",\"renderVirtualNode\",\"watchers\",\"utils\",\"vattrs\",\"classes\",\"class\",\"assign\"],\"mappings\":\"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\",\"sourcesContent\":[\"import { r as registerInstance, f as readTask, w as writeTask, h, H as Host, e as getElement } from './core-c02a05e9.js';\\nimport './config-503c2549.js';\\n\\nconst CELL_TYPE_ITEM = 'item';\\r\\nconst CELL_TYPE_HEADER = 'header';\\r\\nconst CELL_TYPE_FOOTER = 'footer';\\r\\nconst NODE_CHANGE_NONE = 0;\\r\\nconst NODE_CHANGE_POSITION = 1;\\r\\nconst NODE_CHANGE_CELL = 2;\\n\\nconst MIN_READS = 2;\\r\\nconst updateVDom = (dom, heightIndex, cells, range) => {\\r\\n    // reset dom\\r\\n    for (const node of dom) {\\r\\n        node.change = NODE_CHANGE_NONE;\\r\\n        node.d = true;\\r\\n    }\\r\\n    // try to match into exisiting dom\\r\\n    const toMutate = [];\\r\\n    const end = range.offset + range.length;\\r\\n    for (let i = range.offset; i < end; i++) {\\r\\n        const cell = cells[i];\\r\\n        const node = dom.find(n => n.d && n.cell === cell);\\r\\n        if (node) {\\r\\n            const top = heightIndex[i];\\r\\n            if (top !== node.top) {\\r\\n                node.top = top;\\r\\n                node.change = NODE_CHANGE_POSITION;\\r\\n            }\\r\\n            node.d = false;\\r\\n        }\\r\\n        else {\\r\\n            toMutate.push(cell);\\r\\n        }\\r\\n    }\\r\\n    // needs to append\\r\\n    const pool = dom.filter(n => n.d);\\r\\n    for (const cell of toMutate) {\\r\\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\\r\\n        const index = cell.i;\\r\\n        if (node) {\\r\\n            node.d = false;\\r\\n            node.change = NODE_CHANGE_CELL;\\r\\n            node.cell = cell;\\r\\n            node.top = heightIndex[index];\\r\\n        }\\r\\n        else {\\r\\n            dom.push({\\r\\n                d: false,\\r\\n                cell,\\r\\n                visible: true,\\r\\n                change: NODE_CHANGE_CELL,\\r\\n                top: heightIndex[index],\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n    dom\\r\\n        .filter(n => n.d && n.top !== -9999)\\r\\n        .forEach(n => {\\r\\n        n.change = NODE_CHANGE_POSITION;\\r\\n        n.top = -9999;\\r\\n    });\\r\\n};\\r\\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\\r\\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\\r\\n    const childrenNu = children.length;\\r\\n    let child;\\r\\n    for (let i = 0; i < dom.length; i++) {\\r\\n        const node = dom[i];\\r\\n        const cell = node.cell;\\r\\n        // the cell change, the content must be updated\\r\\n        if (node.change === NODE_CHANGE_CELL) {\\r\\n            if (i < childrenNu) {\\r\\n                child = children[i];\\r\\n                nodeRender(child, cell, i);\\r\\n            }\\r\\n            else {\\r\\n                const newChild = createNode(el, cell.type);\\r\\n                child = nodeRender(newChild, cell, i) || newChild;\\r\\n                child.classList.add('virtual-item');\\r\\n                el.appendChild(child);\\r\\n            }\\r\\n            child['$ionCell'] = cell;\\r\\n        }\\r\\n        else {\\r\\n            child = children[i];\\r\\n        }\\r\\n        // only update position when it changes\\r\\n        if (node.change !== NODE_CHANGE_NONE) {\\r\\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\\r\\n        }\\r\\n        // update visibility\\r\\n        const visible = cell.visible;\\r\\n        if (node.visible !== visible) {\\r\\n            if (visible) {\\r\\n                child.classList.remove('virtual-loading');\\r\\n            }\\r\\n            else {\\r\\n                child.classList.add('virtual-loading');\\r\\n            }\\r\\n            node.visible = visible;\\r\\n        }\\r\\n        // dynamic height\\r\\n        if (cell.reads > 0) {\\r\\n            updateCellHeight(cell, child);\\r\\n            cell.reads--;\\r\\n        }\\r\\n    }\\r\\n};\\r\\nconst createNode = (el, type) => {\\r\\n    const template = getTemplate(el, type);\\r\\n    if (template && el.ownerDocument) {\\r\\n        return el.ownerDocument.importNode(template.content, true).children[0];\\r\\n    }\\r\\n    return null;\\r\\n};\\r\\nconst getTemplate = (el, type) => {\\r\\n    switch (type) {\\r\\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\\r\\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\\r\\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\\r\\n    }\\r\\n};\\r\\nconst getViewport = (scrollTop, vierportHeight, margin) => {\\r\\n    return {\\r\\n        top: Math.max(scrollTop - margin, 0),\\r\\n        bottom: scrollTop + vierportHeight + margin\\r\\n    };\\r\\n};\\r\\nconst getRange = (heightIndex, viewport, buffer) => {\\r\\n    const topPos = viewport.top;\\r\\n    const bottomPos = viewport.bottom;\\r\\n    // find top index\\r\\n    let i = 0;\\r\\n    for (; i < heightIndex.length; i++) {\\r\\n        if (heightIndex[i] > topPos) {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const offset = Math.max(i - buffer - 1, 0);\\r\\n    // find bottom index\\r\\n    for (; i < heightIndex.length; i++) {\\r\\n        if (heightIndex[i] >= bottomPos) {\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    const end = Math.min(i + buffer, heightIndex.length);\\r\\n    const length = end - offset;\\r\\n    return { offset, length };\\r\\n};\\r\\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\\r\\n    const end = range.offset + range.length;\\r\\n    return (dirtyIndex <= end ||\\r\\n        currentRange.offset !== range.offset ||\\r\\n        currentRange.length !== range.length);\\r\\n};\\r\\nconst findCellIndex = (cells, index) => {\\r\\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\\r\\n    if (index === 0) {\\r\\n        return 0;\\r\\n    }\\r\\n    else if (index === max + 1) {\\r\\n        return cells.length;\\r\\n    }\\r\\n    else {\\r\\n        return cells.findIndex(c => c.index === index);\\r\\n    }\\r\\n};\\r\\nconst inplaceUpdate = (dst, src, offset) => {\\r\\n    if (offset === 0 && src.length >= dst.length) {\\r\\n        return src;\\r\\n    }\\r\\n    for (let i = 0; i < src.length; i++) {\\r\\n        dst[i + offset] = src[i];\\r\\n    }\\r\\n    return dst;\\r\\n};\\r\\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\\r\\n    const cells = [];\\r\\n    const end = len + offset;\\r\\n    for (let i = offset; i < end; i++) {\\r\\n        const item = items[i];\\r\\n        if (headerFn) {\\r\\n            const value = headerFn(item, i, items);\\r\\n            if (value != null) {\\r\\n                cells.push({\\r\\n                    i: j++,\\r\\n                    type: CELL_TYPE_HEADER,\\r\\n                    value,\\r\\n                    index: i,\\r\\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\\r\\n                    reads: headerHeight ? 0 : MIN_READS,\\r\\n                    visible: !!headerHeight,\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n        cells.push({\\r\\n            i: j++,\\r\\n            type: CELL_TYPE_ITEM,\\r\\n            value: item,\\r\\n            index: i,\\r\\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\\r\\n            reads: itemHeight ? 0 : MIN_READS,\\r\\n            visible: !!itemHeight,\\r\\n        });\\r\\n        if (footerFn) {\\r\\n            const value = footerFn(item, i, items);\\r\\n            if (value != null) {\\r\\n                cells.push({\\r\\n                    i: j++,\\r\\n                    type: CELL_TYPE_FOOTER,\\r\\n                    value,\\r\\n                    index: i,\\r\\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\\r\\n                    reads: footerHeight ? 0 : MIN_READS,\\r\\n                    visible: !!footerHeight,\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return cells;\\r\\n};\\r\\nconst calcHeightIndex = (buf, cells, index) => {\\r\\n    let acum = buf[index];\\r\\n    for (let i = index; i < buf.length; i++) {\\r\\n        buf[i] = acum;\\r\\n        acum += cells[i].height;\\r\\n    }\\r\\n    return acum;\\r\\n};\\r\\nconst resizeBuffer = (buf, len) => {\\r\\n    if (!buf) {\\r\\n        return new Uint32Array(len);\\r\\n    }\\r\\n    if (buf.length === len) {\\r\\n        return buf;\\r\\n    }\\r\\n    else if (len > buf.length) {\\r\\n        const newBuf = new Uint32Array(len);\\r\\n        newBuf.set(buf);\\r\\n        return newBuf;\\r\\n    }\\r\\n    else {\\r\\n        return buf.subarray(0, len);\\r\\n    }\\r\\n};\\r\\nconst positionForIndex = (index, cells, heightIndex) => {\\r\\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\\r\\n    if (cell) {\\r\\n        return heightIndex[cell.i];\\r\\n    }\\r\\n    return -1;\\r\\n};\\n\\nconst VirtualScroll = class {\\n    constructor(hostRef) {\\n        registerInstance(this, hostRef);\\n        this.range = { offset: 0, length: 0 };\\n        this.viewportHeight = 0;\\n        this.cells = [];\\n        this.virtualDom = [];\\n        this.isEnabled = false;\\n        this.viewportOffset = 0;\\n        this.currentScrollTop = 0;\\n        this.indexDirty = 0;\\n        this.lastItemLen = 0;\\n        this.totalHeight = 0;\\n        /**\\n         * It is important to provide this\\n         * if virtual item height will be significantly larger than the default\\n         * The approximate height of each virtual item template's cell.\\n         * This dimension is used to help determine how many cells should\\n         * be created when initialized, and to help calculate the height of\\n         * the scrollable area. This height value can only use `px` units.\\n         * Note that the actual rendered size of each cell comes from the\\n         * app's CSS, whereas this approximation is used to help calculate\\n         * initial dimensions before the item has been rendered.\\n         */\\n        this.approxItemHeight = 45;\\n        /**\\n         * The approximate height of each header template's cell.\\n         * This dimension is used to help determine how many cells should\\n         * be created when initialized, and to help calculate the height of\\n         * the scrollable area. This height value can only use `px` units.\\n         * Note that the actual rendered size of each cell comes from the\\n         * app's CSS, whereas this approximation is used to help calculate\\n         * initial dimensions before the item has been rendered.\\n         */\\n        this.approxHeaderHeight = 30;\\n        /**\\n         * The approximate width of each footer template's cell.\\n         * This dimension is used to help determine how many cells should\\n         * be created when initialized, and to help calculate the height of\\n         * the scrollable area. This height value can only use `px` units.\\n         * Note that the actual rendered size of each cell comes from the\\n         * app's CSS, whereas this approximation is used to help calculate\\n         * initial dimensions before the item has been rendered.\\n         */\\n        this.approxFooterHeight = 30;\\n        this.onScroll = () => {\\n            this.updateVirtualScroll();\\n        };\\n    }\\n    itemsChanged() {\\n        this.calcCells();\\n        this.updateVirtualScroll();\\n    }\\n    async connectedCallback() {\\n        const contentEl = this.el.closest('ion-content');\\n        if (!contentEl) {\\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\\n            return;\\n        }\\n        this.scrollEl = await contentEl.getScrollElement();\\n        this.contentEl = contentEl;\\n        this.calcCells();\\n        this.updateState();\\n    }\\n    componentDidUpdate() {\\n        this.updateState();\\n    }\\n    disconnectedCallback() {\\n        this.scrollEl = undefined;\\n    }\\n    onResize() {\\n        this.calcCells();\\n        this.updateVirtualScroll();\\n    }\\n    /**\\n     * Returns the position of the virtual item at the given index.\\n     */\\n    positionForItem(index) {\\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\\n    }\\n    /**\\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\\n     * dirty any time the content or their style changes.\\n     *\\n     * The subset of items to be updated can are specifing by an offset and a length.\\n     */\\n    async checkRange(offset, len = -1) {\\n        // TODO: kind of hacky how we do in-place updated of the cells\\n        // array. this part needs a complete refactor\\n        if (!this.items) {\\n            return;\\n        }\\n        const length = (len === -1)\\n            ? this.items.length - offset\\n            : len;\\n        const cellIndex = findCellIndex(this.cells, offset);\\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\\n        this.lastItemLen = this.items.length;\\n        this.indexDirty = Math.max(offset - 1, 0);\\n        this.scheduleUpdate();\\n    }\\n    /**\\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\\n     *\\n     * It's equivalent to calling:\\n     *\\n     * ```js\\n     * virtualScroll.checkRange(lastItemLen);\\n     * ```\\n     */\\n    async checkEnd() {\\n        if (this.items) {\\n            this.checkRange(this.lastItemLen);\\n        }\\n    }\\n    updateVirtualScroll() {\\n        // do nothing if virtual-scroll is disabled\\n        if (!this.isEnabled || !this.scrollEl) {\\n            return;\\n        }\\n        // unschedule future updates\\n        if (this.timerUpdate) {\\n            clearTimeout(this.timerUpdate);\\n            this.timerUpdate = undefined;\\n        }\\n        // schedule DOM operations into the stencil queue\\n        readTask(this.readVS.bind(this));\\n        writeTask(this.writeVS.bind(this));\\n    }\\n    readVS() {\\n        const { contentEl, scrollEl, el } = this;\\n        let topOffset = 0;\\n        let node = el;\\n        while (node && node !== contentEl) {\\n            topOffset += node.offsetTop;\\n            node = node.parentElement;\\n        }\\n        this.viewportOffset = topOffset;\\n        if (scrollEl) {\\n            this.viewportHeight = scrollEl.offsetHeight;\\n            this.currentScrollTop = scrollEl.scrollTop;\\n        }\\n    }\\n    writeVS() {\\n        const dirtyIndex = this.indexDirty;\\n        // get visible viewport\\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\\n        // compute lazily the height index\\n        const heightIndex = this.getHeightIndex();\\n        // get array bounds of visible cells base in the viewport\\n        const range = getRange(heightIndex, viewport, 2);\\n        // fast path, do nothing\\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\\n        if (!shouldUpdate) {\\n            return;\\n        }\\n        this.range = range;\\n        // in place mutation of the virtual DOM\\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\\n        // Write DOM\\n        // Different code paths taken depending of the render API used\\n        if (this.nodeRender) {\\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\\n        }\\n        else if (this.domRender) {\\n            this.domRender(this.virtualDom);\\n        }\\n        else if (this.renderItem) {\\n            this.el.forceUpdate();\\n        }\\n    }\\n    updateCellHeight(cell, node) {\\n        const update = () => {\\n            if (node['$ionCell'] === cell) {\\n                const style = window.getComputedStyle(node);\\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\\n                this.setCellHeight(cell, height);\\n            }\\n        };\\n        if (node && node.componentOnReady) {\\n            node.componentOnReady().then(update);\\n        }\\n        else {\\n            update();\\n        }\\n    }\\n    setCellHeight(cell, height) {\\n        const index = cell.i;\\n        // the cell might changed since the height update was scheduled\\n        if (cell !== this.cells[index]) {\\n            return;\\n        }\\n        if (cell.height !== height || cell.visible !== true) {\\n            cell.visible = true;\\n            cell.height = height;\\n            this.indexDirty = Math.min(this.indexDirty, index);\\n            this.scheduleUpdate();\\n        }\\n    }\\n    scheduleUpdate() {\\n        clearTimeout(this.timerUpdate);\\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\\n    }\\n    updateState() {\\n        const shouldEnable = !!(this.scrollEl &&\\n            this.cells);\\n        if (shouldEnable !== this.isEnabled) {\\n            this.enableScrollEvents(shouldEnable);\\n            if (shouldEnable) {\\n                this.updateVirtualScroll();\\n            }\\n        }\\n    }\\n    calcCells() {\\n        if (!this.items) {\\n            return;\\n        }\\n        this.lastItemLen = this.items.length;\\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\\n        this.indexDirty = 0;\\n    }\\n    getHeightIndex() {\\n        if (this.indexDirty !== Infinity) {\\n            this.calcHeightIndex(this.indexDirty);\\n        }\\n        return this.heightIndex;\\n    }\\n    calcHeightIndex(index = 0) {\\n        // TODO: optimize, we don't need to calculate all the cells\\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\\n        this.indexDirty = Infinity;\\n    }\\n    enableScrollEvents(shouldListen) {\\n        if (this.rmEvent) {\\n            this.rmEvent();\\n            this.rmEvent = undefined;\\n        }\\n        const scrollEl = this.scrollEl;\\n        if (scrollEl) {\\n            this.isEnabled = shouldListen;\\n            scrollEl.addEventListener('scroll', this.onScroll);\\n            this.rmEvent = () => {\\n                scrollEl.removeEventListener('scroll', this.onScroll);\\n            };\\n        }\\n    }\\n    renderVirtualNode(node) {\\n        const { type, value, index } = node.cell;\\n        switch (type) {\\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\\n        }\\n    }\\n    render() {\\n        return (h(Host, { style: {\\n                height: `${this.totalHeight}px`\\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\\n    }\\n    get el() { return getElement(this); }\\n    static get watchers() { return {\\n        \\\"itemHeight\\\": [\\\"itemsChanged\\\"],\\n        \\\"headerHeight\\\": [\\\"itemsChanged\\\"],\\n        \\\"footerHeight\\\": [\\\"itemsChanged\\\"],\\n        \\\"items\\\": [\\\"itemsChanged\\\"]\\n    }; }\\n    static get style() { return \\\"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute!important;top:0!important;right:0!important;left:0!important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\\\"; }\\n};\\nconst VirtualProxy = ({ dom }, children, utils) => {\\n    return utils.map(children, (child, i) => {\\n        const node = dom[i];\\n        const vattrs = child.vattrs || {};\\n        let classes = vattrs.class || '';\\n        classes += 'virtual-item ';\\n        if (!node.visible) {\\n            classes += 'virtual-loading';\\n        }\\n        return Object.assign({}, child, { vattrs: Object.assign({}, vattrs, { class: classes, style: Object.assign({}, vattrs.style, { transform: `translate3d(0,${node.top}px,0)` }) }) });\\n    });\\n};\\n\\nexport { VirtualScroll as ion_virtual_scroll };\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{\"8Mb5\":function(t,e,i){\"use strict\";i.r(e),i.d(e,\"ion_virtual_scroll\",(function(){return h}));var s=i(\"MTfx\");i(\"pcH8\");const n=(t,e)=>{const i=r(t,e);return i&&t.ownerDocument?t.ownerDocument.importNode(i.content,!0).children[0]:null},r=(t,e)=>{switch(e){case\"item\":return t.querySelector(\"template:not([name])\");case\"header\":return t.querySelector(\"template[name=header]\");case\"footer\":return t.querySelector(\"template[name=footer]\")}},l=(t,e,i,s,n,r,l,h,o,a,c,d)=>{const g=[],p=d+c;for(let u=c;u<p;u++){const c=t[u];if(n){const e=n(c,u,t);null!=e&&g.push({i:a++,type:\"header\",value:e,index:u,height:i?i(e,u):l,reads:i?0:2,visible:!!i})}if(g.push({i:a++,type:\"item\",value:c,index:u,height:e?e(c,u):o,reads:e?0:2,visible:!!e}),r){const e=r(c,u,t);null!=e&&g.push({i:a++,type:\"footer\",value:e,index:u,height:s?s(e,u):h,reads:s?0:2,visible:!!s})}}return g},h=class{constructor(t){Object(s.l)(this,t),this.range={offset:0,length:0},this.viewportHeight=0,this.cells=[],this.virtualDom=[],this.isEnabled=!1,this.viewportOffset=0,this.currentScrollTop=0,this.indexDirty=0,this.lastItemLen=0,this.totalHeight=0,this.approxItemHeight=45,this.approxHeaderHeight=30,this.approxFooterHeight=30,this.onScroll=()=>{this.updateVirtualScroll()}}itemsChanged(){this.calcCells(),this.updateVirtualScroll()}async connectedCallback(){const t=this.el.closest(\"ion-content\");t?(this.scrollEl=await t.getScrollElement(),this.contentEl=t,this.calcCells(),this.updateState()):console.error(\"<ion-virtual-scroll> must be used inside an <ion-content>\")}componentDidUpdate(){this.updateState()}disconnectedCallback(){this.scrollEl=void 0}onResize(){this.calcCells(),this.updateVirtualScroll()}positionForItem(t){return Promise.resolve(((t,e,i)=>{const s=e.find(e=>\"item\"===e.type&&e.index===t);return s?i[s.i]:-1})(t,this.cells,this.getHeightIndex()))}async checkRange(t,e=-1){if(!this.items)return;const i=-1===e?this.items.length-t:e,s=((t,e)=>0===e?0:e===(t.length>0?t[t.length-1].index:0)+1?t.length:t.findIndex(t=>t.index===e))(this.cells,t),n=l(this.items,this.itemHeight,this.headerHeight,this.footerHeight,this.headerFn,this.footerFn,this.approxHeaderHeight,this.approxFooterHeight,this.approxItemHeight,s,t,i);this.cells=((t,e,i)=>{if(0===i&&e.length>=t.length)return e;for(let s=0;s<e.length;s++)t[s+i]=e[s];return t})(this.cells,n,s),this.lastItemLen=this.items.length,this.indexDirty=Math.max(t-1,0),this.scheduleUpdate()}async checkEnd(){this.items&&this.checkRange(this.lastItemLen)}updateVirtualScroll(){this.isEnabled&&this.scrollEl&&(this.timerUpdate&&(clearTimeout(this.timerUpdate),this.timerUpdate=void 0),Object(s.g)(this.readVS.bind(this)),Object(s.m)(this.writeVS.bind(this)))}readVS(){const{contentEl:t,scrollEl:e,el:i}=this;let s=0,n=i;for(;n&&n!==t;)s+=n.offsetTop,n=n.parentElement;this.viewportOffset=s,e&&(this.viewportHeight=e.offsetHeight,this.currentScrollTop=e.scrollTop)}writeVS(){const t=this.indexDirty,e=((t,e,i)=>({top:Math.max(t-100,0),bottom:t+e+100}))(this.currentScrollTop-this.viewportOffset,this.viewportHeight),i=this.getHeightIndex(),s=((t,e,i)=>{const s=e.top,n=e.bottom;let r=0;for(;r<t.length&&!(t[r]>s);r++);const l=Math.max(r-2-1,0);for(;r<t.length&&!(t[r]>=n);r++);return{offset:l,length:Math.min(r+2,t.length)-l}})(i,e);((t,e,i)=>t<=i.offset+i.length||e.offset!==i.offset||e.length!==i.length)(t,this.range,s)&&(this.range=s,((t,e,i,s)=>{for(const h of t)h.change=0,h.d=!0;const n=[],r=s.offset+s.length;for(let h=s.offset;h<r;h++){const s=i[h],r=t.find(t=>t.d&&t.cell===s);if(r){const t=e[h];t!==r.top&&(r.top=t,r.change=1),r.d=!1}else n.push(s)}const l=t.filter(t=>t.d);for(const h of n){const i=l.find(t=>t.d&&t.cell.type===h.type),s=h.i;i?(i.d=!1,i.change=2,i.cell=h,i.top=e[s]):t.push({d:!1,cell:h,visible:!0,change:2,top:e[s]})}t.filter(t=>t.d&&-9999!==t.top).forEach(t=>{t.change=1,t.top=-9999})})(this.virtualDom,i,this.cells,s),this.nodeRender?((t,e,i,s)=>{const r=Array.from(t.children).filter(t=>\"TEMPLATE\"!==t.tagName),l=r.length;let h;for(let o=0;o<i.length;o++){const a=i[o],c=a.cell;if(2===a.change){if(o<l)e(h=r[o],c,o);else{const i=n(t,c.type);(h=e(i,c,o)||i).classList.add(\"virtual-item\"),t.appendChild(h)}h.$ionCell=c}else h=r[o];0!==a.change&&(h.style.transform=`translate3d(0,${a.top}px,0)`);const d=c.visible;a.visible!==d&&(d?h.classList.remove(\"virtual-loading\"):h.classList.add(\"virtual-loading\"),a.visible=d),c.reads>0&&(s(c,h),c.reads--)}})(this.el,this.nodeRender,this.virtualDom,this.updateCellHeight.bind(this)):this.domRender?this.domRender(this.virtualDom):this.renderItem&&this.el.forceUpdate())}updateCellHeight(t,e){const i=()=>{if(e.$ionCell===t){const i=window.getComputedStyle(e),s=e.offsetHeight+parseFloat(i.getPropertyValue(\"margin-bottom\"));this.setCellHeight(t,s)}};e&&e.componentOnReady?e.componentOnReady().then(i):i()}setCellHeight(t,e){const i=t.i;t===this.cells[i]&&(t.height===e&&!0===t.visible||(t.visible=!0,t.height=e,this.indexDirty=Math.min(this.indexDirty,i),this.scheduleUpdate()))}scheduleUpdate(){clearTimeout(this.timerUpdate),this.timerUpdate=setTimeout(()=>this.updateVirtualScroll(),100)}updateState(){const t=!(!this.scrollEl||!this.cells);t!==this.isEnabled&&(this.enableScrollEvents(t),t&&this.updateVirtualScroll())}calcCells(){this.items&&(this.lastItemLen=this.items.length,this.cells=l(this.items,this.itemHeight,this.headerHeight,this.footerHeight,this.headerFn,this.footerFn,this.approxHeaderHeight,this.approxFooterHeight,this.approxItemHeight,0,0,this.lastItemLen),this.indexDirty=0)}getHeightIndex(){return this.indexDirty!==1/0&&this.calcHeightIndex(this.indexDirty),this.heightIndex}calcHeightIndex(t=0){this.heightIndex=((t,e)=>{if(!t)return new Uint32Array(e);if(t.length===e)return t;if(e>t.length){const i=new Uint32Array(e);return i.set(t),i}return t.subarray(0,e)})(this.heightIndex,this.cells.length),this.totalHeight=((t,e,i)=>{let s=t[i];for(let n=i;n<t.length;n++)t[n]=s,s+=e[n].height;return s})(this.heightIndex,this.cells,t),this.indexDirty=1/0}enableScrollEvents(t){this.rmEvent&&(this.rmEvent(),this.rmEvent=void 0);const e=this.scrollEl;e&&(this.isEnabled=t,e.addEventListener(\"scroll\",this.onScroll),this.rmEvent=()=>{e.removeEventListener(\"scroll\",this.onScroll)})}renderVirtualNode(t){const{type:e,value:i,index:s}=t.cell;switch(e){case\"item\":return this.renderItem(i,s);case\"header\":return this.renderHeader(i,s);case\"footer\":return this.renderFooter(i,s)}}render(){return Object(s.i)(s.a,{style:{height:`${this.totalHeight}px`}},this.renderItem&&Object(s.i)(o,{dom:this.virtualDom},this.virtualDom.map(t=>this.renderVirtualNode(t))))}get el(){return Object(s.f)(this)}static get watchers(){return{itemHeight:[\"itemsChanged\"],headerHeight:[\"itemsChanged\"],footerHeight:[\"itemsChanged\"],items:[\"itemsChanged\"]}}static get style(){return\"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute!important;top:0!important;right:0!important;left:0!important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\"}},o=({dom:t},e,i)=>i.map(e,(e,i)=>{const s=t[i],n=e.vattrs||{};let r=n.class||\"\";return r+=\"virtual-item \",s.visible||(r+=\"virtual-loading\"),Object.assign({},e,{vattrs:Object.assign({},n,{class:r,style:Object.assign({},n.style,{transform:`translate3d(0,${s.top}px,0)`})})})})}}]);","extractedComments":[]}